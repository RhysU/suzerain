/*--------------------------------------------------------------------------
 *
 * Copyright (C) 2012 The PECOS Development Team
 * Please see http://pecos.ices.utexas.edu for more information on PECOS.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 *--------------------------------------------------------------------------
 * gbdmv.def: templated functionality for gbdmv.c
 * $Id$
 */

// #include-time parameters available followed by a sample usage.
// Each of these are #undef-ed at the end of this template file
//
// #define GBDMV_STATIC    /*empty*/         /* Use for static function    */
// #define GBDMV_FUNCTION  dgbdmv            /* Function name              */
// #define GBDMV_COMPONENT double            /* Type of matrices           */
// #define GBDMV_SCALAR    double            /* Type of coeffs and vectors */
// #define GBDMV_KL        const int kl,     /* Matrix lower bandwidth     */
// #define GBDMV_KU        const int ku,     /* Matrix upper bandwidth     */

#ifndef __GBDMV_INTERNAL_ONCE
#define __GBDMV_INTERNAL_ONCE
static inline int ndxmin(int a, int b) { return a < b ? a : b; }
static inline int ndxmax(int a, int b) { return a > b ? a : b; }
#endif /* __GBDMV_INTERNAL_ONCE */

GBDMV_STATIC int GBDMV_FUNCTION(
    char trans, const int n, GBDMV_KL GBDMV_KU
    const GBDMV_SCALAR alpha, const GBDMV_COMPONENT *       restrict d, const int ldd,
                              const GBDMV_COMPONENT *       restrict a, int lda,
                              const    GBDMV_SCALAR * const restrict x, const int incx,
    const GBDMV_SCALAR beta,           GBDMV_SCALAR * const restrict y, const int incy)
{
    // Logic from http://www.netlib.org/blas/dgbmv.f revised
    // for zero-indexed, vectorization-ready code on GCC and Intel.
    // Additional diagonal matrix logic added relative to gbmv.def.

    trans = toupper(trans);  // Simplifies case-insensitive checks

    // Test the input parameters
    if (trans != 'N' && trans != 'T' && trans != 'C') {
        return 1;
    } else if (n < 0) {
        return 2;
    } else if (kl < 0) {
        return 3;
    } else if (ku < 0) {
        return 4;
    } else if (ldd < 0) {
        return 7;
    } else if (lda <= kl + ku) {
        return 9;
    } else if (incx == 0) {
        return 11;
    } else if (incy == 0) {
        return 13;
    }

    // Quick return if possible
    if (n == 0 || (alpha == 0 && beta == 1)) {
        return 0;
    }

    // Start the operations. In this version the elements of A are accessed
    // sequentially with one pass through the band part of A.

    // First form y := beta*y (ignoring the irrelevant incy sign)...
    if (beta != 1) {
        const int abs_incy = abs(incy);
        if (abs_incy == 1) {  // ...for contiguous y
            if (beta == 0) {
                memset(y, 0, n*sizeof(y[0]));
            } else {
                for (int i = 0; i < n; ++i) {
                    y[i] *= beta;
                }
            }
        } else {              // ...for strided y
            if (beta == 0) {
#ifdef __INTEL_COMPILER
#pragma unroll
#endif
                for (int i = 0; i < n; ++i) {
                    y[i*abs_incy] = 0;
                }
            } else {
#ifdef __INTEL_COMPILER
#pragma unroll
#endif
                for (int i = 0; i < n; ++i) {
                    y[i*abs_incy] *= beta;
                }
            }
        }
    }

    // Quick return when the matrices used are irrelevant
    if (alpha == 0) {
        return 0;
    }

    // Set up the start points in x and y.
    int kx = incx > 0 ? 0 : incx*(1 - n);
    int ky = incy > 0 ? 0 : incy*(1 - n);

    // Banded matrix dereference is always of form a[ku + i + j*(lda - 1)].
    // Incorporate the ku offset and decrement lda to speed indexing in loops.
    a += ku;
    --lda;

    // Perform the banded matrix-vector accumulation
    const int klp1 = kl + 1;

    if (trans == 'N') {   // Form y := alpha*D*A*x + y...

        int jx = kx;
        if (incy == 1) {  // ...for contiguous y
            for (int j = 0; j < n; ++j) {
                const int il = ndxmax(0, j - ku);
                const int iu = ndxmin(n, j + klp1);
                const GBDMV_SCALAR temp = alpha*x[jx];
                for (int i = il; i < iu; ++i) {
                    y[i] += temp*d[i*ldd]*a[i];
                }
                jx += incx;
                a += lda;
            }
        } else {          // ...for strided y
            for (int j = 0; j < n; ++j) {
                const int il = ndxmax(0, j - ku);
                const int iu = ndxmin(n, j + klp1);
                const GBDMV_SCALAR temp = alpha*x[jx];
                int iy = ky;
#ifdef __INTEL_COMPILER
#pragma unroll
#endif
                for (int i = il; i < iu; ++i) {
                    y[iy] += temp*d[i*ldd]*a[i];
                    iy += incy;
                }
                jx += incx;
                if (j >= ku) {
                    ky += incy;
                }
                a += lda;
            }
        }

    } else {              // Form y := alpha*D*A**T*x + y...

        int jy = ky;
        if (incx == 1) {  // ...for contiguous x
            for (int j = 0; j < n; ++j) {
                const int il = ndxmax(0, j - ku);
                const int iu = ndxmin(n, j + klp1);
                GBDMV_SCALAR temp = 0;
                for (int i = il; i < iu; ++i) {
                    temp += a[i]*x[i];
                }
                y[jy] += alpha*(*d)*temp;
                jy += incy;
                a  += lda;
                d  += ldd;
            }
        } else {          // ...for strided x
            for (int j = 0; j < n; ++j) {
                const int il = ndxmax(0, j - ku);
                const int iu = ndxmin(n, j + klp1);
                GBDMV_SCALAR temp = 0;
                int ix = kx;
#ifdef __INTEL_COMPILER
#pragma unroll
#endif
                for (int i = il; i < iu; ++i) {
                    temp += a[i]*x[ix];
                    ix += incx;
                }
                y[jy] += alpha*(*d)*temp;
                jy += incy;
                if (j >= ku) {
                    kx += incx;
                }
                a += lda;
                d += ldd;
            }
        }
    }

    return 0;
}

#undef GBDMV_STATIC
#undef GBDMV_FUNCTION
#undef GBDMV_COMPONENT
#undef GBDMV_SCALAR
#undef GBDMV_KL
#undef GBDMV_KU
