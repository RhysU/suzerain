/*--------------------------------------------------------------------------
 *
 * Copyright (C) 2012 The PECOS Development Team
 * Please see http://pecos.ices.utexas.edu for more information on PECOS.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 *--------------------------------------------------------------------------
 * bsmbsm_pack.def: templated functionality for bsmbsm.c
 * $Id$
 */

// #include-time parameters available followed by a sample usage.
// Each of these are #undef-ed at the end of this template file
//
// #define SOURCE    double         /* Source scalar type         */
// #define TARGET    double_complex /* Source scalar  scalar type */
// #define AFFIXPREC see below      /* Prepares BLAS-like names per types */

int
AFFIXPREC(suzerain_bsmbsm_,pack)(
        int S,  int n, int ihat, int jhat,
        int kl, int ku, const TARGET alpha,
                        const SOURCE * restrict b,    int ldb,
        int KL, int KU,       TARGET * restrict papt, int ldpapt)
{
    if (UNLIKELY(S  < 0))
            return suzerain_blas_xerbla(__func__,   1);
    if (UNLIKELY(n  < 0))
            return suzerain_blas_xerbla(__func__,   2);
    if (UNLIKELY(ihat < 0 || ihat >= S))
            return suzerain_blas_xerbla(__func__,   3);
    if (UNLIKELY(jhat < 0 || jhat >= S))
            return suzerain_blas_xerbla(__func__,   4);
    if (UNLIKELY(kl < 0))
            return suzerain_blas_xerbla(__func__,   5);
    if (UNLIKELY(ku < 0))
            return suzerain_blas_xerbla(__func__,   6);
    if (UNLIKELY(ldb  < kl + 1 + ku))
            return suzerain_blas_xerbla(__func__,   8);
    if (UNLIKELY(KL < S*(kl + 1) - 1))
            return suzerain_blas_xerbla(__func__,   9);
    if (UNLIKELY(KU < S*(ku + 1) - 1))
            return suzerain_blas_xerbla(__func__,  10);
    if (UNLIKELY(ldpapt < KL + 1 + KU))
            return suzerain_blas_xerbla(__func__,  12);
    if (UNLIKELY((void*)b == (void*)papt))
            return suzerain_blas_xerbla(__func__, 511);


    // Target dereference is always of form papt[KU + i + j*(ldpapt - 1)].
    // Increment KL anticipating expressions like imin(m, j + KL + 1).
    b    += ku; --ldb;
    papt += KU; --ldpapt;
    ++KL;

    // Copy scaled, banded B into renumbered locations within banded PAP^T
    // Operation walks PAP^T linearly to
    //   (a) copy values inside B's bandwidth into PAP^T, and
    //   (b) zero values outside B's bandwidth within PAP^T.
    // Process simplifies checking for out-of-bandwidth conditions, performs
    // writes (rather than reads) stride one, and does random access across the
    // smaller of PAP^T and B.  The pattern incurs lots of integer operations
    // and branches instead of memory latency.
    const int N = S*n;

    // FIXME Rework loops so that q{j,i}_div_n.quot == {j,i}hat always true
    // Will require some head scratching on suzerain_bsmbsm_q definition,
    // but it should greatly cut down on the number of iterations we run.

    if (alpha != 0) {  // General case

        for (int j = 0; j < N; papt += ldpapt, ++j) {              // Column j
            const int qj = suzerain_bsmbsm_q(S, n, j);
            const div_t qj_div = div(qj, n);
            if (qj_div.quot == jhat) {                             // Inside B?
                const int offjb = qj_div.rem*ldb;
                const int il = imax(0, j - KU);
                const int iu = imin(N, j + KL);
                for (int i = il; i < iu; ++i) {                    // Row il.iu
                    const int qi = suzerain_bsmbsm_q(S, n, i);
                    const div_t qi_div = div(qi, n);
                    if (qi_div.quot == ihat) {                     // Inside B?
                        if (    qj_div.rem - ku <= qi_div.rem
                             && qi_div.rem <= qj_div.rem + kl) {   // In band?
                            papt[i] = alpha*b[qi_div.rem + offjb]; // Yes
                        } else {
                            papt[i] = 0;                           // No
                        }
                    }
                }
            }
        }

    } else {          // Do not reference B when alpha == 0

        for (int j = 0; j < N; papt += ldpapt, ++j) {              // Column j
            const int qj = suzerain_bsmbsm_q(S, n, j);
            const div_t qj_div = div(qj, n);
            if (qj_div.quot == jhat) {                             // Inside B?
                const int il = imax(0, j - KU);
                const int iu = imin(N, j + KL);
                for (int i = il; i < iu; ++i) {                    // Row il.iu
                    const int qi = suzerain_bsmbsm_q(S, n, i);
                    const div_t qi_div = div(qi, n);
                    if (qi_div.quot == ihat) {                     // Inside B?
                        papt[i] = 0;                               // Yes, zero
                    }
                }
            }
        }

    }

    return 0;
}

#undef SOURCE
#undef TARGET
#undef AFFIXPREC
