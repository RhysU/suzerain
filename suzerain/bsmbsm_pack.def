/*--------------------------------------------------------------------------
 *
 * Copyright (C) 2012 Rhys Ulerich
 * Copyright (C) 2012 The PECOS Development Team
 * Please see http://pecos.ices.utexas.edu for more information on PECOS.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 *--------------------------------------------------------------------------
 * bsmbsm_pack.def: templated functionality for bsmbsm.c
 * $Id$
 */

// #include-time parameters available followed by a sample usage.
// Each of these are #undef-ed at the end of this template file
//
// #define SOURCE    double         /* Source scalar type         */
// #define TARGET    double_complex /* Source scalar  scalar type */
// #define AFFIXPREC see below      /* Prepares BLAS-like names per types */

int
AFFIXPREC(suzerain_bsmbsm_,pack)(
        int S,  int n, int ihat, int jhat,
        int kl, int ku, const TARGET alpha,
                        const SOURCE * restrict b,    int ldb,
        int KL, int KU,       TARGET * restrict papt, int ldpapt)
{
    if (UNLIKELY(S  < 0))
            return suzerain_blas_xerbla(__func__,   1);
    if (UNLIKELY(n  < 0))
            return suzerain_blas_xerbla(__func__,   2);
    if (UNLIKELY(ihat < 0 || ihat >= S))
            return suzerain_blas_xerbla(__func__,   3);
    if (UNLIKELY(jhat < 0 || jhat >= S))
            return suzerain_blas_xerbla(__func__,   4);
    if (UNLIKELY(kl < 0))
            return suzerain_blas_xerbla(__func__,   5);
    if (UNLIKELY(ku < 0))
            return suzerain_blas_xerbla(__func__,   6);
    if (UNLIKELY(ldb  < kl + 1 + ku))
            return suzerain_blas_xerbla(__func__,   8);
    if (UNLIKELY(KL < S*(kl + 1) - 1))
            return suzerain_blas_xerbla(__func__,   9);
    if (UNLIKELY(KU < S*(ku + 1) - 1))
            return suzerain_blas_xerbla(__func__,  10);
    if (UNLIKELY(ldpapt < KL + 1 + KU))
            return suzerain_blas_xerbla(__func__,  12);
    if (UNLIKELY((void*)b == (void*)papt))
            return suzerain_blas_xerbla(__func__, 511);

    // Copy scaled, banded B into renumbered locations within banded PAP^T
    // Operation walks PAP^T linearly to
    //   (a) copy values inside B's bandwidth into PAP^T, and
    //   (b) zero values outside B's bandwidth within PAP^T.
    // Process simplifies checking for out-of-bandwidth conditions, performs
    // writes (rather than reads) stride one, and does random access across the
    // smaller of PAP^T and B.  The pattern incurs lots of integer operations
    // but should provide minimal memory latency.
    //
    // Loops iterate across q({j,i}) such that q({j,i})/n == {j,i}hat without
    // visiting the intervening {i,j} and in a way that provides local indices
    // into the B^{ihat,jhat} submatrix.  Uses known form of suzerain_bsmbsm_q.
    // See revision r27980 for an unoptimized version that may provide insight.
    //
    // {bj, bi} indices into B^{ihat,jhat} stored in b
    // { j,  i} indices into PAP^T stored in papt
    // b        always tracks the bj-th column of b
    // papt     always tracks the j-th  column of papt

    // Target dereference is always of form papt[KU + i + j*(ldpapt - 1)].
    // Source dereference is always of form b[ku + bi + bj*(ldb - 1)].
    b    += ku; --ldb;
    papt += KU; --ldpapt;

    const int N      = S*n;           // PAP^T is logically an N by N matrix
    const int ihat1S = ihat + 1 - S;  // Constant hoisted from loops
    papt   += jhat*ldpapt;            // Start walking papt at column jhat
    ldpapt *= S;                      // Walk papt by S columns each iteration
    ++KL;                             // Anticipating imin(N, j + KL + 1)

    if (alpha != 0) {  // General case accessing B

        for (int bj=0, j=jhat; bj<n; ++bj, b+=ldb, j+=S, papt+=ldpapt) {
            const int bil = (imax(0, j-KU) - ihat1S)/S;
            const int biu = (imin(N, j+KL) - ihat1S)/S;
            for (int bi=bil, i=ihat+S*bil; bi < biu; ++bi, i+=S) {
                // Use zero whenever b(bi,bj) not inside bandwidth of b
                papt[i] = (bj-ku <= bi && bi <= bj+kl) ? alpha*b[bi] : 0;
            }
        }

    } else {          // Do not access B when alpha == 0

        for (int bj=0, j=jhat; bj<n; ++bj, b+=ldb, j+=S, papt+=ldpapt) {
            const int bil = (imax(0, j-KU) - ihat1S)/S;
            const int biu = (imin(N, j+KL) - ihat1S)/S;
            for (int bi=bil, i=ihat+S*bil; bi < biu; ++bi, i+=S) {
                papt[i] = 0;
            }
        }

    }

    return 0;
}

#undef SOURCE
#undef TARGET
#undef AFFIXPREC
