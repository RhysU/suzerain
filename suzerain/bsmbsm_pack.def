// #include-time parameters available followed by a sample usage.
// Each of these are #undef-ed at the end of this template file
//
// #define SOURCE    double         /* Source scalar type         */
// #define TARGET    double_complex /* Source scalar  scalar type */
// #define AFFIXPREC see below      /* Prepares BLAS-like names per types */

int
AFFIXPREC(suzerain_bsmbsm_,pack)(
        int S,  int n, int ihat, int jhat,
        int kl, int ku, const SOURCE * restrict b,    int ldb,
        int KL, int KU,       TARGET * restrict papt, int ldpapt)
{
    if (UNLIKELY(S  < 0))
            return suzerain_blas_xerbla(__func__,   1);
    if (UNLIKELY(n  < 0))
            return suzerain_blas_xerbla(__func__,   2);
    if (UNLIKELY(ihat < 0 || ihat >= S))
            return suzerain_blas_xerbla(__func__,   3);
    if (UNLIKELY(jhat < 0 || jhat >= S))
            return suzerain_blas_xerbla(__func__,   4);
    if (UNLIKELY(kl < 0))
            return suzerain_blas_xerbla(__func__,   5);
    if (UNLIKELY(ku < 0))
            return suzerain_blas_xerbla(__func__,   6);
    if (UNLIKELY(ldb  < kl + 1 + ku))
            return suzerain_blas_xerbla(__func__,   8);
    if (UNLIKELY(KL < S*(kl + 1) - 1))
            return suzerain_blas_xerbla(__func__,   9);
    if (UNLIKELY(KU < S*(ku + 1) - 1))
            return suzerain_blas_xerbla(__func__,  10);
    if (UNLIKELY(ldpapt < KL + 1 + KU))
            return suzerain_blas_xerbla(__func__,  12);
    if (UNLIKELY((void*)b == (void*)papt))
            return suzerain_blas_xerbla(__func__, 511);

    // Source dereference is always of form b[ku + i + j*(ldb - 1)].
    // Target uses papt[KU + q(ihat*n + i) + q(jhat*n + j)*(ldpapt - 1)].
    // Increment kl anticipating expressions like imin(m, j + kl + 1).
    b    += ku; --ldb;
    papt += KU; --ldpapt;
    ihat *= n;
    jhat *= n;
    ++kl;

    // Copy banded B into renumbered locations within banded PAP^T
    for (int j = 0; j < n; b += ldb, ++j) {
        const int qinvj_ldpapt = ldpapt*suzerain_bsmbsm_qinv(S, n, jhat + j);
        const int il = imax(0, j - ku);
        const int iu = imin(n, j + kl);
        for (int i = il; i < iu; ++i) {
            const int qinvi = suzerain_bsmbsm_qinv(S, n, ihat + i);
            papt[qinvi + qinvj_ldpapt] = b[i];
        }
    }

    return 0;
}

#undef SOURCE
#undef TARGET
#undef AFFIXPREC
