/*--------------------------------------------------------------------------
 *
 * Copyright (C) 2012-2014 Rhys Ulerich
 * Copyright (C) 2012-2014 The PECOS Development Team
 * Please see http://pecos.ices.utexas.edu for more information on PECOS.
 *
 * This file is part of Suzerain.
 *
 * Suzerain is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Suzerain is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Suzerain.  If not, see <http://www.gnu.org/licenses/>.
 *
 *--------------------------------------------------------------------------
 */

/** @file
 * Templated functionality used within rholut_imexop00.c
 */

// #include-time parameters available followed by a sample usage.
// Each of these are #undef-ed at the end of this template file
//
// #define FUNCNAME00() /* Function name, e.g. suzerain_rholut_imexop_packc00 */
// #define PACK(x)      /* suzerain_bsmbsm_ ## x ## pack{c,f}                 */
// #define PTR(x)       /* suzerain_bsmbsm_ ## x ## pack{c,f}_ptr             */

void
FUNCNAME00()(
        const complex_double phi,
        const suzerain_rholut_imexop_scenario * const s,
        const suzerain_rholut_imexop_ref      * const r,
        const suzerain_rholut_imexop_refld    * const ld,
        const suzerain_bsplineop_workspace    * const w,
        const int rho_E,
        const int rho_u,
        const int rho_v,
        const int rho_w,
        const int rho,
        complex_double * const buf,
        suzerain_bsmbsm * const A_T,
        complex_double * const patpt,
        const double * const c)
{
    // When you modify this routine, you must also modify
    // suzerain_rholut_imexop_accumulate00 so that operator
    // accumulation-without-assembly and assembly match.  The test cases in
    // tests/test_rholut_imexop00.cpp are invaluable in checking the coherence
    // of these two pieces of logic.
    //
    // When you modify this routine, you may also need to modify
    // rholut_imexop.c and rholut_imexop.def so the non-zero-zero
    // mode case is handled consistently.

    // How many rows and columns of banded submatrices will we build?
    const int nneg = (rho_E >= 0)
                   + (rho_u >= 0) + (rho_v >= 0) + (rho_w >= 0)
                   + (rho   >= 0);

    // Compute the BSMBSM structure and named max_kl, max_ku views of w->D_T.
    *A_T = suzerain_bsmbsm_construct(nneg, w->n, w->max_kl, w->max_ku);
    const double * const M  = w->D_T[0] - (w->max_ku - w->ku[0]);
    const double * const D1 = w->D_T[1] - (w->max_ku - w->ku[1]);
    const double * const D2 = w->D_T[2] - (w->max_ku - w->ku[1]);
    assert(w->nderiv >= 2);         // Enough derivatives in workspace?
    assert(A_T->ld == w->ld);       // Compatible storage?

    // Prepare shorthand for some useful derived values
    const double gm1      = s->gamma - 1;
    const double gm3      = s->gamma - 3;
    const double ap43     = s->alpha + 4.0/3.0;
    const double ap13     = s->alpha + 1.0/3.0;
    const double Ma2      = s->Ma*s->Ma;
    const double invRe    = 1 / s->Re;
    const double invMa2   = 1 / Ma2;
    const double ginvPr   = s->gamma / s->Pr;
    const double ginvRePr = s->gamma / (s->Re * s->Pr);

    // TODO Memset patpt to be uniformly zeros and remove zero fill operations.
    // We do not know the leading dimension associated with the definition of
    // PACK() so we must overwrite every possible submatrix within PATPT.

    // This routine assembles the transpose of the operator and hence the
    // equation indices are transposed in calls to PACK(...)(...) and we right
    // the transpose of the discrete operators by diagonal matrices.

    // Prepare pointer to the final element of buf to permit capturing
    // the operator-less-mass-matrices coefficients prior to assembly.
    const complex_double * const bufupper = buf + suzerain_gbmatrix_offset(
            A_T->ld, A_T->kl, A_T->ku, A_T->n-1, A_T->n-1);
    complex_double phi_L[5*5] = { 0 };

    // Shorthand for common patterns below
#   define REF(quantity) r->quantity, ld->quantity
#   define PREAMBLE      'R', A_T->n, A_T->n, A_T->kl, A_T->ku
#   define UPPER_C(i,j)  do { phi_L[(i) + 5*(j)] = phi*(*bufupper); } while (0)

    if (rho_E >= 0) { enum { i = 0 };  // Prepare total energy row

        // On diagonal, mass accumulated last to avoid swamping small values.
        // The factor phi is accounted for in this final mass accumulation.
        /* rho_E */ { enum { j = 0 };
            suzerain_blasext_zgb_diag_scale_acc_d(PREAMBLE,
                    -s->gamma,                   REF(uy),
                    D1, 1, w->ld, 0.0, buf, 1, A_T->ld);

            suzerain_blasext_zgb_diag_scale_acc_d(PREAMBLE,
                    ginvRePr,                    REF(nu),
                    D2, 1, w->ld, 1.0, buf, 1, A_T->ld);

            UPPER_C(j, i);

            suzerain_blas_zgb_acc_d(
                    A_T->n, A_T->n, A_T->kl, A_T->ku,
                    1, M, w->ld, phi, buf, A_T->ld);

            PACK(z)(A_T, rho_E, rho_E, 1.0, buf, patpt);
        }

        if (rho_u >= 0) { enum { j = 1 };
            suzerain_blasext_zgb_diag_scale_acc_d(PREAMBLE,
                    Ma2*invRe*(1-ginvPr),        REF(nuux),
                    D2, 1, w->ld, 0.0, buf, 1, A_T->ld);

            UPPER_C(j, i);

            PACK(z)(A_T, rho_u, rho_E, phi, buf, patpt);
        }

        if (rho_v >= 0) { enum { j = 2 };
            suzerain_blasext_zgb_diag_scale_acc_d(PREAMBLE,
                    -1.0,                        REF(e_divm),
                    D1, 1, w->ld, 0.0, buf, 1, A_T->ld);

            suzerain_blasext_zgb_diag_scale_acc_d(PREAMBLE,
                    Ma2*invRe*(ap43-ginvPr),     REF(nuuy),
                    D2, 1, w->ld, 1.0, buf, 1, A_T->ld);

            UPPER_C(j, i);

            PACK(z)(A_T, rho_v, rho_E, phi, buf, patpt);
        }

        if (rho_w >= 0) { enum { j = 3 };
            suzerain_blasext_zgb_diag_scale_acc_d(PREAMBLE,
                    Ma2*invRe*(1-ginvPr),        REF(nuuz),
                    D2, 1, w->ld, 0.0, buf, 1, A_T->ld);

            UPPER_C(j, i);

            PACK(z)(A_T, rho_w, rho_E, phi, buf, patpt);
        }

        if (rho   >= 0) { enum { j = 4 };
            suzerain_blasext_zgb_diag_scale_acc_d(PREAMBLE,
                    -1.0,                        REF(ey_gradrho),
                    D1, 1, w->ld, 0.0, buf, 1, A_T->ld);

            suzerain_blasext_zgb_dddiag_scale_acc_d(PREAMBLE,
                    -Ma2*invRe,                  REF(nuu2),
                    -Ma2*invRe*ap13,             REF(nuuyuy),
                    ginvRePr/gm1,                REF(e_deltarho),
                    D2, 1, w->ld, 1.0, buf, 1, A_T->ld);

            UPPER_C(j, i);

            PACK(z)(A_T, rho, rho_E, phi, buf, patpt);
        }

    }

    if (rho_u >= 0) { enum { i = 1 };  // Prepare streamwise momentum row

        if (rho_E >= 0) { enum { j = 0 };
            PACK(zd)(A_T, rho_E, rho_u, 0.0, NULL, patpt);
        }

        // On diagonal, mass accumulated last to avoid swamping small values.
        // The factor phi is accounted for in this final mass accumulation.
        /* rho_u */ { enum { j = 1 };
            suzerain_blasext_zgb_diag_scale_acc_d(PREAMBLE,
                    -1.0,                        REF(uy),
                    D1, 1, w->ld, 0.0, buf, 1, A_T->ld);

            suzerain_blasext_zgb_diag_scale_acc_d(PREAMBLE,
                    invRe,                       REF(nu),
                    D2, 1, w->ld, 1.0, buf, 1, A_T->ld);

            UPPER_C(j, i);

            suzerain_blas_zgb_acc_d(
                    A_T->n, A_T->n, A_T->kl, A_T->ku,
                    1, M, w->ld, phi, buf, A_T->ld);

            PACK(z)(A_T, rho_u, rho_u, 1.0, buf, patpt);
        }

        if (rho_v >= 0) { enum { j = 2 };
            suzerain_blasext_zgb_diag_scale_acc_d(PREAMBLE,
                    -1.0,                        REF(ux),
                    D1, 1, w->ld, 0.0, buf, 1, A_T->ld);

            UPPER_C(j, i);

            PACK(z)(A_T, rho_v, rho_u, phi, buf, patpt);
        }

        if (rho_w >= 0) { enum { j = 3 };
            PACK(z)(A_T, rho_w, rho_u, 0.0, NULL, patpt);
        }

        if (rho   >= 0) { enum { j = 4 };
            suzerain_blasext_zgb_diag_scale_acc_d(PREAMBLE,
                     1.0,                        REF(uxuy),
                    D1, 1, w->ld, 0.0, buf, 1, A_T->ld);

            suzerain_blasext_zgb_diag_scale_acc_d(PREAMBLE,
                    -invRe,                      REF(nuux),
                    D2, 1, w->ld, 1.0, buf, 1, A_T->ld);

            UPPER_C(j, i);

            PACK(z)(A_T, rho, rho_u, phi, buf, patpt);
        }

    }

    if (rho_v >= 0) { enum { i = 2 };  // Prepare wall-normal momentum row

        if (rho_E >= 0) { enum { j = 0 };
            // Scale real-valued D1, sans phi, into complex-valued buf
            for (int i = 0; i < A_T->ld*A_T->n; ++i) {
                buf[i] = -gm1*invMa2*D1[i];
            }

            UPPER_C(j, i);

            PACK(z)(A_T, rho_E, rho_v, phi, buf, patpt);
        }

        if (rho_u >= 0) { enum { j = 1 };
            suzerain_blasext_zgb_diag_scale_acc_d(PREAMBLE,
                    gm1,                  REF(ux),
                    D1, 1, w->ld, 0.0, buf, 1, A_T->ld);

            UPPER_C(j, i);

            PACK(z)(A_T, rho_u, rho_v, phi, buf, patpt);
        }

        // On diagonal, mass accumulated last to avoid swamping small values.
        // The factor phi is accounted for in this final mass accumulation.
        /* rho_v */ { enum { j = 2 };
            suzerain_blasext_zgb_diag_scale_acc_d(PREAMBLE,
                    gm3,                  REF(uy),
                    D1, 1, w->ld, 0.0, buf, 1, A_T->ld);

            suzerain_blasext_zgb_diag_scale_acc_d(PREAMBLE,
                    ap43*invRe,           REF(nu),
                    D2, 1, w->ld, 1.0, buf, 1, A_T->ld);

            UPPER_C(j, i);

            suzerain_blas_zgb_acc_d(
                    A_T->n, A_T->n, A_T->kl, A_T->ku,
                    1, M, w->ld, phi, buf, A_T->ld);

            PACK(z)(A_T, rho_v, rho_v, 1.0, buf, patpt);
        }

        if (rho_w >= 0) { enum { j = 3 };
            suzerain_blasext_zgb_diag_scale_acc_d(PREAMBLE,
                    gm1,                  REF(uz),
                    D1, 1, w->ld, 0.0, buf, 1, A_T->ld);

            UPPER_C(j, i);

            PACK(z)(A_T, rho_w, rho_v, phi, buf, patpt);
        }

        if (rho  >= 0) { enum { j = 4 };
            suzerain_blasext_zgb_ddiag_scale_acc_d(PREAMBLE,
                    -0.5*gm1,             REF(u2),
                     1.0,                 REF(uyuy),
                    D1, 1, w->ld, 0.0, buf, 1, A_T->ld);

            suzerain_blasext_zgb_diag_scale_acc_d(PREAMBLE,
                    -ap43*invRe,          REF(nuuy),
                    D2, 1, w->ld, 1.0, buf, 1, A_T->ld);

            UPPER_C(j, i);

            PACK(z)(A_T, rho, rho_v, phi, buf, patpt);
        }

    }

    if (rho_w >= 0) { enum { i = 3 };  // Prepare spanwise momentum row

        if (rho_E >= 0) { enum { j = 0 };
            PACK(zd)(A_T, rho_E, rho_w, 0.0, NULL, patpt);
        }

        if (rho_u >= 0) { enum { j = 1 };
            PACK(zd)(A_T, rho_u, rho_w, 0.0, NULL, patpt);
        }

        if (rho_v >= 0) { enum { j = 2 };
            suzerain_blasext_zgb_diag_scale_acc_d(PREAMBLE,
                    -1.0,                        REF(uz),
                    D1, 1, w->ld, 0.0, buf, 1, A_T->ld);

            UPPER_C(j, i);

            PACK(z)(A_T, rho_v, rho_w, phi, buf, patpt);
        }

        // On diagonal, mass accumulated last to avoid swamping small values.
        // The factor phi is accounted for in this final mass accumulation.
        /* rho_w */ { enum { j = 3 };
            suzerain_blasext_zgb_diag_scale_acc_d(PREAMBLE,
                    -1.0,                        REF(uy),
                    D1, 1, w->ld, 0.0, buf, 1, A_T->ld);

            suzerain_blasext_zgb_diag_scale_acc_d(PREAMBLE,
                    invRe,                       REF(nu),
                    D2, 1, w->ld, 1.0, buf, 1, A_T->ld);

            UPPER_C(j, i);

            suzerain_blas_zgb_acc_d(
                    A_T->n, A_T->n, A_T->kl, A_T->ku,
                    1, M, w->ld, phi, buf, A_T->ld);

            PACK(z)(A_T, rho_w, rho_w, 1.0, buf, patpt);
        }

        if (rho  >= 0) { enum { j = 4 };
            suzerain_blasext_zgb_diag_scale_acc_d(PREAMBLE,
                     1.0,                        REF(uyuz),
                    D1, 1, w->ld, 0.0, buf, 1, A_T->ld);

            suzerain_blasext_zgb_diag_scale_acc_d(PREAMBLE,
                    -invRe,                      REF(nuuz),
                    D2, 1, w->ld, 1.0, buf, 1, A_T->ld);

            UPPER_C(j, i);

            PACK(z)(A_T, rho, rho_w, phi, buf, patpt);
        }

    }

    if (rho >= 0) { enum { i = 4 };  // Prepare density row

        if (rho_E >= 0) { enum { j = 0 };
            PACK(zd)(A_T, rho_E, rho, 0.0, NULL, patpt);
        }

        if (rho_u >= 0) { enum { j = 1 };
            PACK(zd)(A_T, rho_u, rho, 0.0, NULL, patpt);
        }

        if (rho_v >= 0) { enum { j = 2 };
            // Scale real-valued D1, sans phi, into complex-valued buf
            for (int i = 0; i < A_T->ld*A_T->n; ++i) {
                buf[i] = -D1[i];
            }

            UPPER_C(j, i);

            PACK(z )(A_T, rho_v, rho, phi, buf, patpt);
        }

        if (rho_w >= 0) { enum { j = 3 };
            PACK(zd)(A_T, rho_w, rho, 0.0, NULL, patpt);
        }

        /* rho */       { enum { j = 4 };
            PACK(zd)(A_T, rho,   rho, 1.0, M, patpt);
        }

    }

#   undef REF
#   undef PREAMBLE
#   undef UPPER_C

    if (c) {

        const int u[5] = {
            suzerain_bsmbsm_qinv(A_T->S, A_T->n, (rho_E+1)*A_T->n - 1),
            suzerain_bsmbsm_qinv(A_T->S, A_T->n, (rho_u+1)*A_T->n - 1),
            suzerain_bsmbsm_qinv(A_T->S, A_T->n, (rho_v+1)*A_T->n - 1),
            suzerain_bsmbsm_qinv(A_T->S, A_T->n, (rho_w+1)*A_T->n - 1),
            suzerain_bsmbsm_qinv(A_T->S, A_T->n, (rho  +1)*A_T->n - 1)
        };

        if (rho_E >= 0) { enum { i = 0 };
            if (rho_E >= 0) { enum { j = 0 };
                *PTR(z)(A_T, u[j], u[i], patpt) -= c[0]*phi_L[ 0] + c[5]*phi_L[ 1] + c[10]*phi_L[ 2] + c[15]*phi_L[ 3] + c[20]*phi_L[ 4];
            }
            if (rho_u >= 0) { enum { j = 1 };
                *PTR(z)(A_T, u[j], u[i], patpt) -= c[1]*phi_L[ 0] + c[6]*phi_L[ 1] + c[11]*phi_L[ 2] + c[16]*phi_L[ 3] + c[21]*phi_L[ 4];
            }
            if (rho_v >= 0) { enum { j = 2 };
                *PTR(z)(A_T, u[j], u[i], patpt) -= c[2]*phi_L[ 0] + c[7]*phi_L[ 1] + c[12]*phi_L[ 2] + c[17]*phi_L[ 3] + c[22]*phi_L[ 4];
            }
            if (rho_w >= 0) { enum { j = 3 };
                *PTR(z)(A_T, u[j], u[i], patpt) -= c[3]*phi_L[ 0] + c[8]*phi_L[ 1] + c[13]*phi_L[ 2] + c[18]*phi_L[ 3] + c[23]*phi_L[ 4];
            }
            if (rho   >= 0) { enum { j = 4 };
                *PTR(z)(A_T, u[j], u[i], patpt) -= c[4]*phi_L[ 0] + c[9]*phi_L[ 1] + c[14]*phi_L[ 2] + c[19]*phi_L[ 3] + c[24]*phi_L[ 4];
            }
        }
        if (rho_u >= 0) { enum { i = 1 };
            if (rho_E >= 0) { enum { j = 0 };
                *PTR(z)(A_T, u[j], u[i], patpt) -= c[0]*phi_L[ 5] + c[5]*phi_L[ 6] + c[10]*phi_L[ 7] + c[15]*phi_L[ 8] + c[20]*phi_L[ 9];
            }
            if (rho_u >= 0) { enum { j = 1 };
                *PTR(z)(A_T, u[j], u[i], patpt) -= c[1]*phi_L[ 5] + c[6]*phi_L[ 6] + c[11]*phi_L[ 7] + c[16]*phi_L[ 8] + c[21]*phi_L[ 9];
            }
            if (rho_v >= 0) { enum { j = 2 };
                *PTR(z)(A_T, u[j], u[i], patpt) -= c[2]*phi_L[ 5] + c[7]*phi_L[ 6] + c[12]*phi_L[ 7] + c[17]*phi_L[ 8] + c[22]*phi_L[ 9];
            }
            if (rho_w >= 0) { enum { j = 3 };
                *PTR(z)(A_T, u[j], u[i], patpt) -= c[3]*phi_L[ 5] + c[8]*phi_L[ 6] + c[13]*phi_L[ 7] + c[18]*phi_L[ 8] + c[23]*phi_L[ 9];
            }
            if (rho   >= 0) { enum { j = 4 };
                *PTR(z)(A_T, u[j], u[i], patpt) -= c[4]*phi_L[ 5] + c[9]*phi_L[ 6] + c[14]*phi_L[ 7] + c[19]*phi_L[ 8] + c[24]*phi_L[ 9];
            }
        }
        if (rho_v >= 0) { enum { i = 2 };
            if (rho_E >= 0) { enum { j = 0 };
                *PTR(z)(A_T, u[j], u[i], patpt) -= c[0]*phi_L[10] + c[5]*phi_L[11] + c[10]*phi_L[12] + c[15]*phi_L[13] + c[20]*phi_L[14];
            }
            if (rho_u >= 0) { enum { j = 1 };
                *PTR(z)(A_T, u[j], u[i], patpt) -= c[1]*phi_L[10] + c[6]*phi_L[11] + c[11]*phi_L[12] + c[16]*phi_L[13] + c[21]*phi_L[14];
            }
            if (rho_v >= 0) { enum { j = 2 };
                *PTR(z)(A_T, u[j], u[i], patpt) -= c[2]*phi_L[10] + c[7]*phi_L[11] + c[12]*phi_L[12] + c[17]*phi_L[13] + c[22]*phi_L[14];
            }
            if (rho_w >= 0) { enum { j = 3 };
                *PTR(z)(A_T, u[j], u[i], patpt) -= c[3]*phi_L[10] + c[8]*phi_L[11] + c[13]*phi_L[12] + c[18]*phi_L[13] + c[23]*phi_L[14];
            }
            if (rho   >= 0) { enum { j = 4 };
                *PTR(z)(A_T, u[j], u[i], patpt) -= c[4]*phi_L[10] + c[9]*phi_L[11] + c[14]*phi_L[12] + c[19]*phi_L[13] + c[24]*phi_L[14];
            }
        }
        if (rho_w >= 0) { enum { i = 3 };
            if (rho_E >= 0) { enum { j = 0 };
                *PTR(z)(A_T, u[j], u[i], patpt) -= c[0]*phi_L[15] + c[5]*phi_L[16] + c[10]*phi_L[17] + c[15]*phi_L[18] + c[20]*phi_L[19];
            }
            if (rho_u >= 0) { enum { j = 1 };
                *PTR(z)(A_T, u[j], u[i], patpt) -= c[1]*phi_L[15] + c[6]*phi_L[16] + c[11]*phi_L[17] + c[16]*phi_L[18] + c[21]*phi_L[19];
            }
            if (rho_v >= 0) { enum { j = 2 };
                *PTR(z)(A_T, u[j], u[i], patpt) -= c[2]*phi_L[15] + c[7]*phi_L[16] + c[12]*phi_L[17] + c[17]*phi_L[18] + c[22]*phi_L[19];
            }
            if (rho_w >= 0) { enum { j = 3 };
                *PTR(z)(A_T, u[j], u[i], patpt) -= c[3]*phi_L[15] + c[8]*phi_L[16] + c[13]*phi_L[17] + c[18]*phi_L[18] + c[23]*phi_L[19];
            }
            if (rho   >= 0) { enum { j = 4 };
                *PTR(z)(A_T, u[j], u[i], patpt) -= c[4]*phi_L[15] + c[9]*phi_L[16] + c[14]*phi_L[17] + c[19]*phi_L[18] + c[24]*phi_L[19];
            }
        }
        if (rho   >= 0) { enum { i = 4 };
            if (rho_E >= 0) { enum { j = 0 };
                *PTR(z)(A_T, u[j], u[i], patpt) -= c[0]*phi_L[20] + c[5]*phi_L[21] + c[10]*phi_L[22] + c[15]*phi_L[23] + c[20]*phi_L[24];
            }
            if (rho_u >= 0) { enum { j = 1 };
                *PTR(z)(A_T, u[j], u[i], patpt) -= c[1]*phi_L[20] + c[6]*phi_L[21] + c[11]*phi_L[22] + c[16]*phi_L[23] + c[21]*phi_L[24];
            }
            if (rho_v >= 0) { enum { j = 2 };
                *PTR(z)(A_T, u[j], u[i], patpt) -= c[2]*phi_L[20] + c[7]*phi_L[21] + c[12]*phi_L[22] + c[17]*phi_L[23] + c[22]*phi_L[24];
            }
            if (rho_w >= 0) { enum { j = 3 };
                *PTR(z)(A_T, u[j], u[i], patpt) -= c[3]*phi_L[20] + c[8]*phi_L[21] + c[13]*phi_L[22] + c[18]*phi_L[23] + c[23]*phi_L[24];
            }
            if (rho   >= 0) { enum { j = 4 };
                *PTR(z)(A_T, u[j], u[i], patpt) -= c[4]*phi_L[20] + c[9]*phi_L[21] + c[14]*phi_L[22] + c[19]*phi_L[23] + c[24]*phi_L[24];
            }
        }
    }

}

#undef FUNCNAME00
#undef PACK
#undef PTR

/* vim: set ft=c:   */
/* Local Variables: */
/* mode: c          */
/* End:             */
