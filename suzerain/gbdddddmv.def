/*--------------------------------------------------------------------------
 *
 * Copyright (C) 2012, 2013 Rhys Ulerich
 * Copyright (C) 2012, 2013 The PECOS Development Team
 * Please see http://pecos.ices.utexas.edu for more information on PECOS.
 *
 * This file is part of Suzerain.
 *
 * Suzerain is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Suzerain is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Suzerain.  If not, see <http://www.gnu.org/licenses/>.
 *
 *--------------------------------------------------------------------------
 */

/** @file
 * Templated functionality used within gbdddddmv.c
 */

// #include-time parameters available followed by a sample usage.
// Each of these are #undef-ed at the end of this template file
//
// #define STATIC    /*empty*/         /* Use for static function    */
// #define FUNCTION  dgbdddmv          /* Function name              */
// #define TYPE_D    double            /* Type of diagonal matrix    */
// #define TYPE_A    double            /* Type of banded matrix      */
// #define TYPE_X    double            /* Type of input vector       */
// #define TYPE_Y    double            /* Type of coeffs and output  */
// #define KL        const int kl,     /* Matrix lower bandwidth     */
// #define KU        const int ku,     /* Matrix upper bandwidth     */

#ifndef GBDDDDDMV_INTERNAL_ONCE
#define GBDDDDDMV_INTERNAL_ONCE
static inline int ndxmin(int a, int b) { return a < b ? a : b; }
static inline int ndxmax(int a, int b) { return a > b ? a : b; }
#endif /* GBDDDDDMV_INTERNAL_ONCE */

STATIC int FUNCTION(
    char trans, const int n, KL KU
    const TYPE_Y alpha0, const TYPE_D *       restrict d0, const int ldd0,
    const TYPE_Y alpha1, const TYPE_D *       restrict d1, const int ldd1,
    const TYPE_Y alpha2, const TYPE_D *       restrict d2, const int ldd2,
    const TYPE_Y alpha3, const TYPE_D *       restrict d3, const int ldd3,
    const TYPE_Y alpha4, const TYPE_D *       restrict d4, const int ldd4,
                         const TYPE_A *       restrict a,        int lda,
                         const TYPE_X * const restrict x,  const int incx,
    const TYPE_Y beta,         TYPE_Y * const restrict y,  const int incy)
{
    // Logic from http://www.netlib.org/blas/dgbmv.f revised
    // for zero-indexed, vectorization-ready code on GCC and Intel.
    // Additional diagonal matrices logic added relative to gbmv.def.

    trans = toupper(trans);  // Simplifies case-insensitive checks

    // Test the input parameters
    if (SUZERAIN_UNLIKELY(trans != 'N' && trans != 'T' && trans != 'C')) {
        return 1;
    } else if (SUZERAIN_UNLIKELY(n < 0)) {
        return 2;
    } else if (SUZERAIN_UNLIKELY(kl < 0)) {
        return 3;
    } else if (SUZERAIN_UNLIKELY(ku < 0)) {
        return 4;
    } else if (SUZERAIN_UNLIKELY(ldd0 < 0)) {
        return 7;
    } else if (SUZERAIN_UNLIKELY(ldd1 < 0)) {
        return 10;
    } else if (SUZERAIN_UNLIKELY(ldd2 < 0)) {
        return 13;
    } else if (SUZERAIN_UNLIKELY(ldd3 < 0)) {
        return 16;
    } else if (SUZERAIN_UNLIKELY(ldd4 < 0)) {
        return 19;
    } else if (SUZERAIN_UNLIKELY(lda <= kl + ku)) {
        return 21;
    } else if (SUZERAIN_UNLIKELY(incx == 0)) {
        return 23;
    } else if (SUZERAIN_UNLIKELY(incy == 0)) {
        return 26;
    }

    // Quick return if possible
    if (SUZERAIN_UNLIKELY(n == 0)) {
        return 0;
    }

    // Start the operations. In this version the elements of A are accessed
    // sequentially with one pass through the band part of A.

    // First form y := beta*y (ignoring the irrelevant incy sign)...
    if (beta != 1) {
        const int abs_incy = abs(incy);
        if (abs_incy == 1) {  // ...for contiguous y
            if (beta == 0) {
                memset(y, 0, n*sizeof(y[0]));
            } else {
                for (int i = 0; i < n; ++i) {
                    y[i] *= beta;
                }
            }
        } else {              // ...for strided y
            if (beta == 0) {
#ifdef __INTEL_COMPILER
#pragma unroll
#endif
                for (int i = 0; i < n; ++i) {
                    y[i*abs_incy] = 0;
                }
            } else {
#ifdef __INTEL_COMPILER
#pragma unroll
#endif
                for (int i = 0; i < n; ++i) {
                    y[i*abs_incy] *= beta;
                }
            }
        }
    }

    // Quick return when the matrices used are irrelevant
    if (SUZERAIN_UNLIKELY(alpha0 == 0 && alpha1 == 0 && alpha2 == 0
                                      && alpha3 == 0 && alpha4 == 0)) {
        return 0;
    }

    // Set up the start points in x and y.
    int kx = SUZERAIN_LIKELY(incx > 0) ? 0 : incx*(1 - n);
    int ky = SUZERAIN_LIKELY(incy > 0) ? 0 : incy*(1 - n);

    // Banded matrix dereference is always of form a[ku + i + j*(lda - 1)].
    // Incorporate the ku offset and decrement lda to speed indexing in loops.
    a += ku;
    --lda;

    // Perform the banded matrix-vector accumulation
    const int klp1 = kl + 1;

    if (trans == 'N') {   // Form y := (alpha0*D0+alpha1*D1)*A*x + y...

        int jx = kx;
        if (incy == 1) {  // ...for contiguous y
            for (int j = 0; j < n; ++j) {
                const int il = ndxmax(0, j - ku);
                const int iu = ndxmin(n, j + klp1);
                for (int i = il; i < iu; ++i) {
                    y[i] += ( alpha0*d0[i*ldd0]
                             +alpha1*d1[i*ldd1]
                             +alpha2*d2[i*ldd2]
                             +alpha3*d3[i*ldd3]
                             +alpha4*d4[i*ldd4])*a[i]*x[jx];
                }
                jx += incx;
                a += lda;
            }
        } else {          // ...for strided y
            for (int j = 0; j < n; ++j) {
                const int il = ndxmax(0, j - ku);
                const int iu = ndxmin(n, j + klp1);
                int iy = ky;
#ifdef __INTEL_COMPILER
#pragma unroll
#endif
                for (int i = il; i < iu; ++i) {
                    y[iy] += ( alpha0*d0[i*ldd0]
                              +alpha1*d1[i*ldd1]
                              +alpha2*d2[i*ldd2]
                              +alpha3*d3[i*ldd3]
                              +alpha4*d4[i*ldd4])*a[i]*x[jx];
                    iy += incy;
                }
                jx += incx;
                if (j >= ku) {
                    ky += incy;
                }
                a += lda;
            }
        }

    } else {              // Form y := (alpha0*D0+alpha1*D1)*A**T*x + y...

        int jy = ky;
        if (incx == 1) {  // ...for contiguous x
            for (int j = 0; j < n; ++j) {
                const int il = ndxmax(0, j - ku);
                const int iu = ndxmin(n, j + klp1);
                TYPE_Y temp = 0;
                for (int i = il; i < iu; ++i) {
                    temp += a[i]*x[i];
                }
                y[jy] += (alpha0*(*d0)+alpha1*(*d1)+alpha2*(*d2)+alpha3*(*d3)+alpha4*(*d4))*temp;
                jy += incy;
                a  += lda;
                d0 += ldd0;
                d1 += ldd1;
                d2 += ldd2;
                d3 += ldd3;
                d4 += ldd4;
            }
        } else {          // ...for strided x
            for (int j = 0; j < n; ++j) {
                const int il = ndxmax(0, j - ku);
                const int iu = ndxmin(n, j + klp1);
                TYPE_Y temp = 0;
                int ix = kx;
#ifdef __INTEL_COMPILER
#pragma unroll
#endif
                for (int i = il; i < iu; ++i) {
                    temp += a[i]*x[ix];
                    ix += incx;
                }
                y[jy] += (alpha0*(*d0)+alpha1*(*d1)+alpha2*(*d2)+alpha3*(*d3)+alpha4*(*d4))*temp;
                jy += incy;
                if (j >= ku) {
                    kx += incx;
                }
                a  += lda;
                d0 += ldd0;
                d1 += ldd1;
                d2 += ldd2;
                d3 += ldd3;
                d4 += ldd4;
            }
        }
    }

    return 0;
}

#undef STATIC
#undef FUNCTION
#undef TYPE_D
#undef TYPE_A
#undef TYPE_X
#undef TYPE_Y
#undef KL
#undef KU

/* vim: set ft=c:   */
/* Local Variables: */
/* mode: c          */
/* End:             */
