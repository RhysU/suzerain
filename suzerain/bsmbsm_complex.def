// #include-time parameters available followed by a sample usage.
// Each of these are #undef-ed at the end of this template file
//
// #define COMPONENT double  /* Real-valued floating point type         */
// #define AFFIXPREC         /* Prepares BLAS-like names per COMPONENT  */

void
AFFIXPREC(suzerain_bsmbsm_,aPxpby)(
    char trans,
    int S,
    int n,
    const COMPONENT alpha[2],
    const COMPONENT (* restrict x)[2],
    int incx,
    const COMPONENT beta[2],
    COMPONENT (* restrict y)[2],
    int incy)
{
    if (UNLIKELY(S <  0)) return suzerain_blas_xerbla(__func__,  2);
    if (UNLIKELY(n <  0)) return suzerain_blas_xerbla(__func__,  3);
    if (UNLIKELY((void*)x == (void*)y))
                          return suzerain_blas_xerbla(__func__, 58);

    // Adjust for P versus P^T operation
    switch (toupper(trans)) {
        case 'N': break;
        case 'T': S ^= n; n ^= S; S ^= n;  // (S <=> n) ==> (q <=> q^-1)
                  break;
        default:  return suzerain_blas_xerbla(__func__, 1);
    }

#pragma warning(push,disable:1572)
    const _Bool alpha_is_real = (alpha[1] == 0);
    const _Bool beta_is_real  = (beta[1]  == 0);
    const _Bool alpha_is_one  = (alpha_is_real && alpha[0] == 1);
    const _Bool beta_is_one   = (beta_is_real  && beta[0]  == 1);
    const _Bool beta_is_zero  = (beta_is_real  && beta[0]  == 0);
#pragma warning(pop)

    // Compute vector length
    const int N = S*n;

    // Dispatch based on stride characteristics
    if (incx == 1 && incy == 1) {

        // Dispatch to alpha- and beta-specific loops
        if        (alpha_is_one) {
            if        (beta_is_zero) {
                for (int i = 0; i < N; ++i) {
                    const int ix = suzerain_bsmbsm_q(S, n, i);
                    y[i][0] = x[ix][0];                               // P x
                    y[i][1] = x[ix][1];
                }
            } else if (beta_is_one)  {
                for (int i = 0; i < N; ++i) {
                    const int ix = suzerain_bsmbsm_q(S, n, i);
                    y[i][0] += x[ix][0];                              // P x
                    y[i][1] += x[ix][1];                              // y
                }
            } else if (beta_is_real) {
                for (int i = 0; i < N; ++i) {
                    const int ix = suzerain_bsmbsm_q(S, n, i);
                    y[i][0] *= beta[0];                               // beta y
                    y[i][1] *= beta[0];
                    y[i][0] += x[ix][0];                              // P x
                    y[i][1] += x[ix][1];
                }
            } else {// beta_is_complex
                for (int i = 0; i < N; ++i) {
                    const int ix = suzerain_bsmbsm_q(S, n, i);
                    COMPONENT tmp[2];
                    tmp[0]  = beta [0]*y[i][0] - beta [1]*y[i][1];    // beta y
                    tmp[1]  = beta [0]*y[i][1] + beta [1]*y[i][0];
                    y[i][0] = tmp[0] + x[ix][0];                      // P x
                    y[i][1] = tmp[1] + x[ix][1];
                }
            }
        } else if (alpha_is_real) {
            if        (beta_is_zero) {
                for (int i = 0; i < N; ++i) {
                    const int ix = suzerain_bsmbsm_q(S, n, i);
                    y[i][0] = alpha[0]*x[ix][0];                      // alpha P x
                    y[i][1] = alpha[0]*x[ix][1];
                }
            } else if (beta_is_one)  {
                for (int i = 0; i < N; ++i) {
                    const int ix = suzerain_bsmbsm_q(S, n, i);
                    y[i][0] += alpha[0]*x[ix][0];                     // alpha P x
                    y[i][1] += alpha[0]*x[ix][1];                     // y
                }
            } else if (beta_is_real) {
                for (int i = 0; i < N; ++i) {
                    const int ix = suzerain_bsmbsm_q(S, n, i);
                    y[i][0] *= beta[0];                               // beta y
                    y[i][1] *= beta[0];
                    y[i][0] += alpha[0]*x[ix][0];                     // alpha P x
                    y[i][1] += alpha[0]*x[ix][1];
                }
            } else {// beta_is_complex
                for (int i = 0; i < N; ++i) {
                    const int ix = suzerain_bsmbsm_q(S, n, i);
                    COMPONENT tmp[2];
                    tmp[0]  = beta [0]*y[i][0] - beta [1]*y[i][1];    // beta y
                    tmp[1]  = beta [0]*y[i][1] + beta [1]*y[i][0];
                    y[i][0] = tmp[0] + alpha[0]*x[ix][0];             // alpha P x
                    y[i][1] = tmp[1] + alpha[0]*x[ix][1];
                }
            }
        } else {// alpha_is_complex
            if        (beta_is_zero) {
                for (int i = 0; i < N; ++i) {
                    const int ix = suzerain_bsmbsm_q(S, n, i);
                    y[i][0]  = alpha[0]*x[ix][0] - alpha[1]*x[ix][1]; // alpha P x
                    y[i][1]  = alpha[0]*x[ix][1] + alpha[1]*x[ix][0];
                }
            } else if (beta_is_one)  {
                for (int i = 0; i < N; ++i) {
                    const int ix = suzerain_bsmbsm_q(S, n, i);
                    y[i][0] += alpha[0]*x[ix][0] - alpha[1]*x[ix][1]; // alpha P x
                    y[i][1] += alpha[0]*x[ix][1] + alpha[1]*x[ix][0]; // y
                }
            } else if (beta_is_real) {
                for (int i = 0; i < N; ++i) {
                    const int ix = suzerain_bsmbsm_q(S, n, i);
                    y[i][0] *= beta[0];                               // beta y
                    y[i][1] *= beta[0];
                    y[i][0] += alpha[0]*x[ix][0] - alpha[1]*x[ix][1]; // alpha P x
                    y[i][1] += alpha[0]*x[ix][1] + alpha[1]*x[ix][0];
                }
            } else {// beta_is_complex
                for (int i = 0; i < N; ++i) {
                    const int ix = suzerain_bsmbsm_q(S, n, i);
                    COMPONENT tmp[2];
                    tmp[0]  = alpha[0]*x[ix][0] - alpha[1]*x[ix][1];  // alpha P x
                    tmp[1]  = alpha[0]*x[ix][1] + alpha[1]*x[ix][0];
                    tmp[0]  += beta [0]*y[i][0] - beta [1]*y[i][1];   // beta y
                    tmp[1]  += beta [0]*y[i][1] + beta [1]*y[i][0];
                    y[i][0] = tmp[0];
                    y[i][1] = tmp[1];
                }
            }
        }

    } else if (incx == 1) {

        // Adjust for possibly negative incy
        int iy = (incy < 0) ? (1 - N)*incy : 0;

        // Dispatch to alpha- and beta-specific loops
        if        (alpha_is_one) {
            if        (beta_is_zero) {
                for (int i = 0; i < N; ++i, iy += incy) {
                    const int ix = suzerain_bsmbsm_q(S, n, i);
                    y[iy][0] = x[ix][0];                               // P x
                    y[iy][1] = x[ix][1];
                }
            } else if (beta_is_one)  {
                for (int i = 0; i < N; ++i, iy += incy) {
                    const int ix = suzerain_bsmbsm_q(S, n, i);
                    y[iy][0] += x[ix][0];                              // P x
                    y[iy][1] += x[ix][1];                              // y
                }
            } else if (beta_is_real) {
                for (int i = 0; i < N; ++i, iy += incy) {
                    const int ix = suzerain_bsmbsm_q(S, n, i);
                    y[iy][0] *= beta[0];                               // beta y
                    y[iy][1] *= beta[0];
                    y[iy][0] += x[ix][0];                              // P x
                    y[iy][1] += x[ix][1];
                }
            } else {// beta_is_complex
                for (int i = 0; i < N; ++i, iy += incy) {
                    const int ix = suzerain_bsmbsm_q(S, n, i);
                    COMPONENT tmp[2];
                    tmp[0]   = beta [0]*y[iy][0] - beta [1]*y[iy][1];  // beta y
                    tmp[1]   = beta [0]*y[iy][1] + beta [1]*y[iy][0];
                    y[iy][0] = tmp[0] + x[ix][0];                      // P x
                    y[iy][1] = tmp[1] + x[ix][1];
                }
            }
        } else if (alpha_is_real) {
            if        (beta_is_zero) {
                for (int i = 0; i < N; ++i, iy += incy) {
                    const int ix = suzerain_bsmbsm_q(S, n, i);
                    y[iy][0]  = alpha[0]*x[ix][0];                     // alpha P x
                    y[iy][1]  = alpha[0]*x[ix][1];
                }
            } else if (beta_is_one)  {
                for (int i = 0; i < N; ++i, iy += incy) {
                    const int ix = suzerain_bsmbsm_q(S, n, i);
                    y[iy][0] += alpha[0]*x[ix][0];                     // alpha P x
                    y[iy][1] += alpha[0]*x[ix][1];                     // y
                }
            } else if (beta_is_real) {
                for (int i = 0; i < N; ++i, iy += incy) {
                    const int ix = suzerain_bsmbsm_q(S, n, i);
                    y[iy][0] *= beta[0];                               // beta y
                    y[iy][1] *= beta[0];
                    y[iy][0] += alpha[0]*x[ix][0];                     // alpha P x
                    y[iy][1] += alpha[0]*x[ix][1];
                }
            } else {// beta_is_complex
                for (int i = 0; i < N; ++i, iy += incy) {
                    const int ix = suzerain_bsmbsm_q(S, n, i);
                    COMPONENT tmp[2];
                    tmp[0]   = beta [0]*y[iy][0] - beta [1]*y[iy][1];  // beta y
                    tmp[1]   = beta [0]*y[iy][1] + beta [1]*y[iy][0];
                    y[iy][0] = tmp[0] + alpha[0]*x[ix][0];             // alpha P x
                    y[iy][1] = tmp[1] + alpha[0]*x[ix][1];
                }
            }
        } else {// alpha_is_complex
            if        (beta_is_zero) {
                for (int i = 0; i < N; ++i, iy += incy) {
                    const int ix = suzerain_bsmbsm_q(S, n, i);
                    y[iy][0]  = alpha[0]*x[ix][0] - alpha[1]*x[ix][1];  // alpha P x
                    y[iy][1]  = alpha[0]*x[ix][1] + alpha[1]*x[ix][0];
                }
            } else if (beta_is_one)  {
                for (int i = 0; i < N; ++i, iy += incy) {
                    const int ix = suzerain_bsmbsm_q(S, n, i);
                    y[iy][0] += alpha[0]*x[ix][0] - alpha[1]*x[ix][1];  // alpha P x
                    y[iy][1] += alpha[0]*x[ix][1] + alpha[1]*x[ix][0];  // y
                }
            } else if (beta_is_real) {
                for (int i = 0; i < N; ++i, iy += incy) {
                    const int ix = suzerain_bsmbsm_q(S, n, i);
                    y[iy][0] *= beta[0];                               // beta y
                    y[iy][1] *= beta[0];
                    y[iy][0] += alpha[0]*x[ix][0] - alpha[1]*x[ix][1]; // alpha P x
                    y[iy][1] += alpha[0]*x[ix][1] + alpha[1]*x[ix][0];
                }
            } else {// beta_is_complex
                for (int i = 0; i < N; ++i, iy += incy) {
                    const int ix = suzerain_bsmbsm_q(S, n, i);
                    COMPONENT tmp[2];
                    tmp[0]   = alpha[0]*x[ix][0] - alpha[1]*x[ix][1];  // alpha P x
                    tmp[1]   = alpha[0]*x[ix][1] + alpha[1]*x[ix][0];
                    tmp[0]  += beta [0]*y[iy][0] - beta [1]*y[iy][1];  // beta y
                    tmp[1]  += beta [0]*y[iy][1] + beta [1]*y[iy][0];
                    y[iy][0] = tmp[0];
                    y[iy][1] = tmp[1];
                }
            }
        }

    } else { // general strides

        // Adjust for possibly negative incx and incy
        int iy = (incy < 0) ? (1 - N)*incy : 0;
        if (incx < 0) x += (1 - N)*incx;

        // Dispatch to alpha- and beta-specific loops
        if        (alpha_is_one) {
            if        (beta_is_zero) {
                for (int i = 0; i < N; ++i, iy += incy) {
                    const int ix = incx*suzerain_bsmbsm_q(S, n, i);
                    y[iy][0] = x[ix][0];                               // P x
                    y[iy][1] = x[ix][1];
                }
            } else if (beta_is_one)  {
                for (int i = 0; i < N; ++i, iy += incy) {
                    const int ix = incx*suzerain_bsmbsm_q(S, n, i);
                    y[iy][0] += x[ix][0];                              // P x
                    y[iy][1] += x[ix][1];                              // y
                }
            } else if (beta_is_real) {
                for (int i = 0; i < N; ++i, iy += incy) {
                    const int ix = incx*suzerain_bsmbsm_q(S, n, i);
                    y[iy][0] *= beta[0];                               // beta y
                    y[iy][1] *= beta[0];
                    y[iy][0] += x[ix][0];                              // P x
                    y[iy][1] += x[ix][1];
                }
            } else {// beta_is_complex
                for (int i = 0; i < N; ++i, iy += incy) {
                    const int ix = incx*suzerain_bsmbsm_q(S, n, i);
                    COMPONENT tmp[2];
                    tmp[0]   = beta [0]*y[iy][0] - beta [1]*y[iy][1];  // beta y
                    tmp[1]   = beta [0]*y[iy][1] + beta [1]*y[iy][0];
                    y[iy][0] = tmp[0] + x[ix][0];                      // P x
                    y[iy][1] = tmp[1] + x[ix][1];
                }
            }
        } else if (alpha_is_real) {
            if        (beta_is_zero) {
                for (int i = 0; i < N; ++i, iy += incy) {
                    const int ix = incx*suzerain_bsmbsm_q(S, n, i);
                    y[iy][0]  = alpha[0]*x[ix][0];                     // alpha P x
                    y[iy][1]  = alpha[0]*x[ix][1];
                }
            } else if (beta_is_one)  {
                for (int i = 0; i < N; ++i, iy += incy) {
                    const int ix = incx*suzerain_bsmbsm_q(S, n, i);
                    y[iy][0] += alpha[0]*x[ix][0];                     // alpha P x
                    y[iy][1] += alpha[0]*x[ix][1];                     // y
                }
            } else if (beta_is_real) {
                for (int i = 0; i < N; ++i, iy += incy) {
                    const int ix = incx*suzerain_bsmbsm_q(S, n, i);
                    y[iy][0] *= beta[0];                               // beta y
                    y[iy][1] *= beta[0];
                    y[iy][0] += alpha[0]*x[ix][0];                     // alpha P x
                    y[iy][1] += alpha[0]*x[ix][1];
                }
            } else {// beta_is_complex
                for (int i = 0; i < N; ++i, iy += incy) {
                    const int ix = incx*suzerain_bsmbsm_q(S, n, i);
                    COMPONENT tmp[2];
                    tmp[0]   = beta [0]*y[iy][0] - beta [1]*y[iy][1];  // beta y
                    tmp[1]   = beta [0]*y[iy][1] + beta [1]*y[iy][0];
                    y[iy][0] = tmp[0] + alpha[0]*x[ix][0];             // alpha P x
                    y[iy][1] = tmp[1] + alpha[0]*x[ix][1];
                }
            }
        } else {// alpha_is_complex
            if        (beta_is_zero) {
                for (int i = 0; i < N; ++i, iy += incy) {
                    const int ix = incx*suzerain_bsmbsm_q(S, n, i);
                    y[iy][0]  = alpha[0]*x[ix][0] - alpha[1]*x[ix][1];  // alpha P x
                    y[iy][1]  = alpha[0]*x[ix][1] + alpha[1]*x[ix][0];
                }
            } else if (beta_is_one)  {
                for (int i = 0; i < N; ++i, iy += incy) {
                    const int ix = incx*suzerain_bsmbsm_q(S, n, i);
                    y[iy][0] += alpha[0]*x[ix][0] - alpha[1]*x[ix][1];  // alpha P x
                    y[iy][1] += alpha[0]*x[ix][1] + alpha[1]*x[ix][0];  // y
                }
            } else if (beta_is_real) {
                for (int i = 0; i < N; ++i, iy += incy) {
                    const int ix = incx*suzerain_bsmbsm_q(S, n, i);
                    y[iy][0] *= beta[0];                               // beta y
                    y[iy][1] *= beta[0];
                    y[iy][0] += alpha[0]*x[ix][0] - alpha[1]*x[ix][1]; // alpha P x
                    y[iy][1] += alpha[0]*x[ix][1] + alpha[1]*x[ix][0];
                }
            } else {// beta_is_complex
                for (int i = 0; i < N; ++i, iy += incy) {
                    const int ix = incx*suzerain_bsmbsm_q(S, n, i);
                    COMPONENT tmp[2];
                    tmp[0]   = alpha[0]*x[ix][0] - alpha[1]*x[ix][1];  // alpha P x
                    tmp[1]   = alpha[0]*x[ix][1] + alpha[1]*x[ix][0];
                    tmp[0]  += beta [0]*y[iy][0] - beta [1]*y[iy][1];  // beta y
                    tmp[1]  += beta [0]*y[iy][1] + beta [1]*y[iy][0];
                    y[iy][0] = tmp[0];
                    y[iy][1] = tmp[1];
                }
            }
        }

    }
}


void
AFFIXPREC(suzerain_bsmbsm_,pack)(
        int S,  int n, int ihat, int jhat,
        int kl, int ku, const COMPONENT (* restrict b)[2],    int ldb,
        int KL, int KU,       COMPONENT (* restrict papt)[2], int ldpapt)
{
    if (UNLIKELY(S  < 0))
            return suzerain_blas_xerbla(__func__,   1);
    if (UNLIKELY(n  < 0))
            return suzerain_blas_xerbla(__func__,   2);
    if (UNLIKELY(ihat < 0 || ihat >= S))
            return suzerain_blas_xerbla(__func__,   3);
    if (UNLIKELY(jhat < 0 || jhat >= S))
            return suzerain_blas_xerbla(__func__,   4);
    if (UNLIKELY(kl < 0))
            return suzerain_blas_xerbla(__func__,   5);
    if (UNLIKELY(ku < 0))
            return suzerain_blas_xerbla(__func__,   6);
    if (UNLIKELY(ldb  < kl + 1 + ku))
            return suzerain_blas_xerbla(__func__,   8);
    if (UNLIKELY(KL < S*(kl + 1) - 1))
            return suzerain_blas_xerbla(__func__,   9);
    if (UNLIKELY(KU < S*(ku + 1) - 1))
            return suzerain_blas_xerbla(__func__,  10);
    if (UNLIKELY(ldpapt < KL + 1 + KU))
            return suzerain_blas_xerbla(__func__,  12);
    if (UNLIKELY((void*)b == (void*)papt))
            return suzerain_blas_xerbla(__func__, 511);

    // Source dereference is always of form b[ku + i + j*(ldb - 1)].
    // Target uses papt[KU + q(ihat*n + i) + q(jhat*n + j)*(ldpapt - 1)].
    // Increment kl anticipating expressions like imin(m, j + kl + 1).
    b    += ku; --ldb;
    papt += KU; --ldpapt;
    ihat *= n;
    jhat *= n;
    ++kl;

    // Copy banded B into renumbered locations within banded PAP^T
    for (int j = 0; j < n; b += ldb, ++j) {
        const int qinvj_ldpapt = ldpapt*suzerain_bsmbsm_qinv(S, n, jhat + j);
        const int il = imax(0, j - ku);
        const int iu = imin(n, j + kl);
        for (int i = il; i < iu; ++i) {
            const int qinvi = suzerain_bsmbsm_qinv(S, n, ihat + i);
            memcpy(papt + qinvi + qinvj_ldpapt, b + i, 2*sizeof(COMPONENT));
        }
    }
}

#undef COMPONENT
#undef AFFIXPREC
