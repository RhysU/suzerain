// #include-time parameters available followed by a sample usage.
// Each of these are #undef-ed at the end of this template file
//
// #define COMPONENT double  /* Real-valued floating point type         */
// #define AFFIXPREC         /* Prepares BLAS-like names per COMPONENT  */

void
AFFIXPREC(suzerain_bsmbsm_,aPxpby)(
    char trans,
    int S,
    int n,
    const COMPONENT alpha,
    const COMPONENT * restrict x,
    int incx,
    const COMPONENT beta,
    COMPONENT * restrict y,
    int incy)
{
    if (UNLIKELY(S <  0)) return suzerain_blas_xerbla(__func__,  2);
    if (UNLIKELY(n <  0)) return suzerain_blas_xerbla(__func__,  3);
    if (UNLIKELY(x == y)) return suzerain_blas_xerbla(__func__, 58);

    // Adjust for P versus P^T operation
    switch (toupper(trans)) {
        case 'N': break;
        case 'T': S ^= n; n ^= S; S ^= n;  // (S <=> n) ==> (q <=> q^-1)
                  break;
        default:  return suzerain_blas_xerbla(__func__, 1);
    }

#pragma warning(push,disable:1572)
    const _Bool alpha_is_one  = (alpha == 1);
    const _Bool beta_is_zero  = (beta  == 0);
    const _Bool beta_is_one   = (beta  == 1);
#pragma warning(pop)

    // Compute vector length
    const int N = S*n;

    // Dispatch based on stride characteristics
    if (incx == 1 && incy == 1) {

        // Dispatch to alpha- and beta-specific loops
        if (alpha_is_one) {
            if        (beta_is_zero) {                  // y := P x
                for (int i = 0; i < N; ++i) {
                    const int ix = suzerain_bsmbsm_q(S, n, i);
                    y[i] = x[ix];
                }
            } else if (beta_is_one) {                   // y := P x + y
                for (int i = 0; i < N; ++i) {
                    const int ix = suzerain_bsmbsm_q(S, n, i);
                    y[i] += x[ix];
                }
            } else {                                    // y := P x + beta y
                for (int i = 0; i < N; ++i) {
                    const int ix = suzerain_bsmbsm_q(S, n, i);
                    y[i] = x[ix] + beta*y[i];
                }
            }
        } else {
            if        (beta_is_zero) {                  // y := alpha P x
                for (int i = 0; i < N; ++i) {
                    const int ix = suzerain_bsmbsm_q(S, n, i);
                    y[i] = alpha*x[ix];
                }
            } else if (beta_is_one) {                   // y := alpha P x + y
                for (int i = 0; i < N; ++i) {
                    const int ix = suzerain_bsmbsm_q(S, n, i);
                    y[i] += alpha*x[ix];
                }
            } else {                                    // y := alpha P x + beta y
                for (int i = 0; i < N; ++i) {
                    const int ix = suzerain_bsmbsm_q(S, n, i);
                    y[i] = alpha*x[ix] + beta*y[i];
                }
            }
        }

    } else if (incx == 1) {

        // Adjust for possibly negative incy
        int iy = (incy < 0) ? (1 - N)*incy : 0;

        // Dispatch to alpha- and beta-specific loops
        if (alpha_is_one) {
            if        (beta_is_zero) {                  // y := P x
                for (int i = 0; i < N; ++i, iy += incy) {
                    const int ix = suzerain_bsmbsm_q(S, n, i);
                    y[iy] = x[ix];
                }
            } else if (beta_is_one) {                   // y := P x + y
                for (int i = 0; i < N; ++i, iy += incy) {
                    const int ix = suzerain_bsmbsm_q(S, n, i);
                    y[iy] += x[ix];
                }
            } else {                                    // y := P x + beta y
                for (int i = 0; i < N; ++i, iy += incy) {
                    const int ix = suzerain_bsmbsm_q(S, n, i);
                    y[iy] = x[ix] + beta*y[iy];
                }
            }
        } else {
            if        (beta_is_zero) {                  // y := alpha P x
                for (int i = 0; i < N; ++i, iy += incy) {
                    const int ix = suzerain_bsmbsm_q(S, n, i);
                    y[iy] = alpha*x[ix];
                }
            } else if (beta_is_one) {                   // y := alpha P x + y
                for (int i = 0; i < N; ++i, iy += incy) {
                    const int ix = suzerain_bsmbsm_q(S, n, i);
                    y[iy] += alpha*x[ix];
                }
            } else {                                    // y := alpha P x + beta y
                for (int i = 0; i < N; ++i, iy += incy) {
                    const int ix = suzerain_bsmbsm_q(S, n, i);
                    y[iy] = alpha*x[ix] + beta*y[iy];
                }
            }
        }

    } else { // general strides

        // Adjust for possibly negative incx and incy
        int iy = (incy < 0) ? (1 - N)*incy : 0;
        if (incx < 0) x += (1 - N)*incx;

        // Dispatch to alpha- and beta-specific loops
        if (alpha_is_one) {
            if        (beta_is_zero) {                  // y :=       P x
                for (int i = 0; i < N; ++i, iy += incy) {
                    const int ix = incx*suzerain_bsmbsm_q(S, n, i);
                    y[iy] = x[ix];
                }
            } else if (beta_is_one) {                   // y :=       P x +      y
                for (int i = 0; i < N; ++i, iy += incy) {
                    const int ix = incx*suzerain_bsmbsm_q(S, n, i);
                    y[iy] += x[ix];
                }
            } else {                                    // y :=       P x + beta y
                for (int i = 0; i < N; ++i, iy += incy) {
                    const int ix = incx*suzerain_bsmbsm_q(S, n, i);
                    y[iy] = x[ix] + beta*y[iy];
                }
            }
        } else {
            if        (beta_is_zero) {                  // y := alpha P x
                for (int i = 0; i < N; ++i, iy += incy) {
                    const int ix = incx*suzerain_bsmbsm_q(S, n, i);
                    y[iy] = alpha*x[ix];
                }
            } else if (beta_is_one) {                   // y := alpha P x +      y
                for (int i = 0; i < N; ++i, iy += incy) {
                    const int ix = incx*suzerain_bsmbsm_q(S, n, i);
                    y[iy] += alpha*x[ix];
                }
            } else {                                    // y := alpha P x + beta y
                for (int i = 0; i < N; ++i, iy += incy) {
                    const int ix = incx*suzerain_bsmbsm_q(S, n, i);
                    y[iy] = alpha*x[ix] + beta*y[iy];
                }
            }
        }

    }
}

void
AFFIXPREC(suzerain_bsmbsm_,pack)(
        int S, int n, int kl, int ku,
        const COMPONENT * restrict b, int ihat, int jhat, int ldb,
        COMPONENT * restrict papt, int ldpapt)
{
    int KL = S*(kl + 1) - 1;
    int KU = S*(ku + 1) - 1;
    int LD = KL + 1 + KU;

    if (UNLIKELY(S  < 0))
            return suzerain_blas_xerbla(__func__, 1);
    if (UNLIKELY(n  < 0))
            return suzerain_blas_xerbla(__func__, 2);
    if (UNLIKELY(kl < 0))
            return suzerain_blas_xerbla(__func__, 3);
    if (UNLIKELY(ku < 0))
            return suzerain_blas_xerbla(__func__, 4);
    if (UNLIKELY(ihat < 0 || ihat >= S))
            return suzerain_blas_xerbla(__func__,  6);
    if (UNLIKELY(jhat < 0 || jhat >= S))
            return suzerain_blas_xerbla(__func__,  7);
    if (UNLIKELY(ldb    < kl + 1 + ku))
            return suzerain_blas_xerbla(__func__,  8);
    if (UNLIKELY(ldpapt < KL + 1 + KU))
            return suzerain_blas_xerbla(__func__, 10);
    if (UNLIKELY((void*)b == (void*)papt))
            return suzerain_blas_xerbla(__func__, 59);

    // Source matrix dereference is always of form b[ku + i + j*(ldb - 1)].
    // Target matrix uses papt[KU + q(ihat*n + i) + q(jhat*n + j)*(LD - 1)].
    // Further, increment kl anticipating expressions like imin(m, j + kl + 1).
    b    += ku; --ldb;
    papt += KU; --LD;
    ihat *= n;
    jhat *= n;
    ++kl;

    // Copy matrix B into the appropriate locations within PAP^T
    for (int j = 0; j < n; b += ldb, ++j) {
        const int qjLD = LD*suzerain_bsmbsm_q(S, n, jhat + j);
        const int il = imax(0, j - ku);
        const int iu = imin(n, j + kl);
        for (int i = il; i < iu; ++i) {
            const int qi = suzerain_bsmbsm_q(S, n, ihat + i);
            papt[qi + qjLD] = b[i];
        }
    }
}

#undef COMPONENT
#undef AFFIXPREC
