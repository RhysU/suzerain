/*--------------------------------------------------------------------------
 *
 * Copyright (C) 2012 Rhys Ulerich
 * Copyright (C) 2012 The PECOS Development Team
 * Please see http://pecos.ices.utexas.edu for more information on PECOS.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 *--------------------------------------------------------------------------
 * bsmbsm_aPxpby_complex.def: templated functionality for bsmbsm.c
 * $Id$
 */

// #include-time parameters available followed by a sample usage.
// Each of these are #undef-ed at the end of this template file
//
// #define COMPONENT double         /* Real-valued floating point type      */
// #define COMPLEX   double_complex /* Complex-valued floating point type   */
// #define AFFIXPREC                /* Prepares BLAS-like names per COMPLEX */

int
AFFIXPREC(suzerain_bsmbsm_,aPxpby)(
    char trans,
    int S,
    int n,
    const COMPLEX alpha,
    const COMPLEX * restrict x_,
    int incx,
    const COMPLEX beta,
    COMPLEX * restrict y_,
    int incy)
{
    if (UNLIKELY(S < 0))    return suzerain_blas_xerbla(__func__,  2);
    if (UNLIKELY(n < 0))    return suzerain_blas_xerbla(__func__,  3);
    if (UNLIKELY(x_ == y_)) return suzerain_blas_xerbla(__func__, 58);

    // Adjust for P versus P^T operation
    switch (toupper(trans)) {
        case 'N': break;
        case 'T': S ^= n; n ^= S; S ^= n;  // (S <=> n) ==> (q <=> q^-1)
                  break;
        default:  return suzerain_blas_xerbla(__func__, 1);
    }

    // Work with memory using separate real- and imaginary-valued components
    // This eases dispatching to FLOP-efficient, specialized loops below.
    const COMPONENT alpha_re = creal(alpha);
    const COMPONENT alpha_im = cimag(alpha);
    const COMPONENT beta_re  = creal(beta);
    const COMPONENT beta_im  = cimag(beta);
#pragma warning(push,disable:191)
    const COMPONENT (* restrict x)[2] = (const COMPONENT (* restrict)[2]) x_;
          COMPONENT (* restrict y)[2] = (      COMPONENT (* restrict)[2]) y_;
#pragma warning(pop)

#pragma warning(push,disable:1572)
    const _Bool alpha_is_real = (alpha_im == 0);
    const _Bool beta_is_real  = (beta_im  == 0);
    const _Bool alpha_is_one  = (alpha_is_real && alpha_re == 1);
    const _Bool beta_is_one   = (beta_is_real  && beta_re  == 1);
    const _Bool beta_is_zero  = (beta_is_real  && beta_re  == 0);
#pragma warning(pop)

    // All loops below iterate linearly across y[i] using x[q(i)].  The odd
    // looking loops employ known suzerain_bsmbsm_q details to avoid incurring
    // integer division costs associated within suzerain_bsmbsm_q.

    // Hoist common constants out of loops
    const int N = S*n;

    // Adjust for possibly negative incy
    int iy = (incy < 0) ? (1 - N)*incy : 0;

    if (incx == 1) {  // x is stride one

        // Dispatch to alpha- and beta-specific loops
        if        (alpha_is_one) {
            if        (beta_is_zero) {
                for (int i = 0; i < n; ++i) {
                    for (int ix = i; ix < N; ix += n, iy += incy) {
                        memcpy(y + iy, x + ix, 2*sizeof(x[0][0]));         // P x
                    }
                }
            } else if (beta_is_one)  {
                for (int i = 0; i < n; ++i) {
                    for (int ix = i; ix < N; ix += n, iy += incy) {
                        y[iy][0] += x[ix][0];                              // P x
                        y[iy][1] += x[ix][1];                              // y
                    }
                }
            } else if (beta_is_real) {
                for (int i = 0; i < n; ++i) {
                    for (int ix = i; ix < N; ix += n, iy += incy) {
                        y[iy][0] *= beta_re;                               // beta y
                        y[iy][1] *= beta_re;
                        y[iy][0] += x[ix][0];                              // P x
                        y[iy][1] += x[ix][1];
                    }
                }
            } else {// beta_is_complex
                for (int i = 0; i < n; ++i) {
                    for (int ix = i; ix < N; ix += n, iy += incy) {
                        COMPONENT tmp[2];
                        tmp[0]   = beta_re*y[iy][0] - beta_im*y[iy][1];    // beta y
                        tmp[1]   = beta_re*y[iy][1] + beta_im*y[iy][0];
                        y[iy][0] = tmp[0] + x[ix][0];                      // P x
                        y[iy][1] = tmp[1] + x[ix][1];
                    }
                }
            }
        } else if (alpha_is_real) {
            if        (beta_is_zero) {
                for (int i = 0; i < n; ++i) {
                    for (int ix = i; ix < N; ix += n, iy += incy) {
                        y[iy][0]  = alpha_re*x[ix][0];                     // alpha P x
                        y[iy][1]  = alpha_re*x[ix][1];
                    }
                }
            } else if (beta_is_one)  {
                for (int i = 0; i < n; ++i) {
                    for (int ix = i; ix < N; ix += n, iy += incy) {
                        y[iy][0] += alpha_re*x[ix][0];                     // alpha P x
                        y[iy][1] += alpha_re*x[ix][1];                     // y
                    }
                }
            } else if (beta_is_real) {
                for (int i = 0; i < n; ++i) {
                    for (int ix = i; ix < N; ix += n, iy += incy) {
                        y[iy][0] *= beta_re;                               // beta y
                        y[iy][1] *= beta_re;
                        y[iy][0] += alpha_re*x[ix][0];                     // alpha P x
                        y[iy][1] += alpha_re*x[ix][1];
                    }
                }
            } else {// beta_is_complex
                for (int i = 0; i < n; ++i) {
                    for (int ix = i; ix < N; ix += n, iy += incy) {
                        COMPONENT tmp[2];
                        tmp[0]   = beta_re*y[iy][0] - beta_im*y[iy][1];    // beta y
                        tmp[1]   = beta_re*y[iy][1] + beta_im*y[iy][0];
                        y[iy][0] = tmp[0] + alpha_re*x[ix][0];             // alpha P x
                        y[iy][1] = tmp[1] + alpha_re*x[ix][1];
                    }
                }
            }
        } else {// alpha_is_complex
            if        (beta_is_zero) {
                for (int i = 0; i < n; ++i) {
                    for (int ix = i; ix < N; ix += n, iy += incy) {
                        y[iy][0]  = alpha_re*x[ix][0] - alpha_im*x[ix][1]; // alpha P x
                        y[iy][1]  = alpha_re*x[ix][1] + alpha_im*x[ix][0];
                    }
                }
            } else if (beta_is_one)  {
                for (int i = 0; i < n; ++i) {
                    for (int ix = i; ix < N; ix += n, iy += incy) {
                        y[iy][0] += alpha_re*x[ix][0] - alpha_im*x[ix][1]; // alpha P x
                        y[iy][1] += alpha_re*x[ix][1] + alpha_im*x[ix][0]; // y
                    }
                }
            } else if (beta_is_real) {
                for (int i = 0; i < n; ++i) {
                    for (int ix = i; ix < N; ix += n, iy += incy) {
                        y[iy][0] *= beta_re;                               // beta y
                        y[iy][1] *= beta_re;
                        y[iy][0] += alpha_re*x[ix][0] - alpha_im*x[ix][1]; // alpha P x
                        y[iy][1] += alpha_re*x[ix][1] + alpha_im*x[ix][0];
                    }
                }
            } else {// beta_is_complex
                for (int i = 0; i < n; ++i) {
                    for (int ix = i; ix < N; ix += n, iy += incy) {
                        COMPONENT tmp[2];
                        tmp[0]   = alpha_re*x[ix][0] - alpha_im*x[ix][1];  // alpha P x
                        tmp[1]   = alpha_re*x[ix][1] + alpha_im*x[ix][0];
                        tmp[0]  += beta_re *y[iy][0] - beta_im *y[iy][1];  // beta y
                        tmp[1]  += beta_re *y[iy][1] + beta_im *y[iy][0];
                        y[iy][0] = tmp[0];
                        y[iy][1] = tmp[1];
                    }
                }
            }
        }

    } else {          // General strides

        // Adjust for possibly negative incx
        if (incx < 0) x += (1 - N)*incx;

        // Dispatch to alpha- and beta-specific loops
        if        (alpha_is_one) {
            if        (beta_is_zero) {
                for (int i = 0; i < n; ++i) {
                    for (int j = i; j < N; j += n, iy += incy) {
                        const int ix = j*incx;
                        memcpy(y + iy, x + ix, 2*sizeof(x[0][0]));         // P x
                    }
                }
            } else if (beta_is_one)  {
                for (int i = 0; i < n; ++i) {
                    for (int j = i; j < N; j += n, iy += incy) {
                        const int ix = j*incx;
                        y[iy][0] += x[ix][0];                              // P x
                        y[iy][1] += x[ix][1];                              // y
                    }
                }
            } else if (beta_is_real) {
                for (int i = 0; i < n; ++i) {
                    for (int j = i; j < N; j += n, iy += incy) {
                        const int ix = j*incx;
                        y[iy][0] *= beta_re;                               // beta y
                        y[iy][1] *= beta_re;
                        y[iy][0] += x[ix][0];                              // P x
                        y[iy][1] += x[ix][1];
                    }
                }
            } else {// beta_is_complex
                for (int i = 0; i < n; ++i) {
                    for (int j = i; j < N; j += n, iy += incy) {
                        const int ix = j*incx;
                        COMPONENT tmp[2];
                        tmp[0]   = beta_re*y[iy][0] - beta_im*y[iy][1];    // beta y
                        tmp[1]   = beta_re*y[iy][1] + beta_im*y[iy][0];
                        y[iy][0] = tmp[0] + x[ix][0];                      // P x
                        y[iy][1] = tmp[1] + x[ix][1];
                    }
                }
            }
        } else if (alpha_is_real) {
            if        (beta_is_zero) {
                for (int i = 0; i < n; ++i) {
                    for (int j = i; j < N; j += n, iy += incy) {
                        const int ix = j*incx;
                        y[iy][0]  = alpha_re*x[ix][0];                     // alpha P x
                        y[iy][1]  = alpha_re*x[ix][1];
                    }
                }
            } else if (beta_is_one)  {
                for (int i = 0; i < n; ++i) {
                    for (int j = i; j < N; j += n, iy += incy) {
                        const int ix = j*incx;
                        y[iy][0] += alpha_re*x[ix][0];                     // alpha P x
                        y[iy][1] += alpha_re*x[ix][1];                     // y
                    }
                }
            } else if (beta_is_real) {
                for (int i = 0; i < n; ++i) {
                    for (int j = i; j < N; j += n, iy += incy) {
                        const int ix = j*incx;
                        y[iy][0] *= beta_re;                               // beta y
                        y[iy][1] *= beta_re;
                        y[iy][0] += alpha_re*x[ix][0];                     // alpha P x
                        y[iy][1] += alpha_re*x[ix][1];
                    }
                }
            } else {// beta_is_complex
                for (int i = 0; i < n; ++i) {
                    for (int j = i; j < N; j += n, iy += incy) {
                        const int ix = j*incx;
                        COMPONENT tmp[2];
                        tmp[0]   = beta_re*y[iy][0] - beta_im*y[iy][1];    // beta y
                        tmp[1]   = beta_re*y[iy][1] + beta_im*y[iy][0];
                        y[iy][0] = tmp[0] + alpha_re*x[ix][0];             // alpha P x
                        y[iy][1] = tmp[1] + alpha_re*x[ix][1];
                    }
                }
            }
        } else {// alpha_is_complex
            if        (beta_is_zero) {
                for (int i = 0; i < n; ++i) {
                    for (int j = i; j < N; j += n, iy += incy) {
                        const int ix = j*incx;
                        y[iy][0]  = alpha_re*x[ix][0] - alpha_im*x[ix][1]; // alpha P x
                        y[iy][1]  = alpha_re*x[ix][1] + alpha_im*x[ix][0];
                    }
                }
            } else if (beta_is_one)  {
                for (int i = 0; i < n; ++i) {
                    for (int j = i; j < N; j += n, iy += incy) {
                        const int ix = j*incx;
                        y[iy][0] += alpha_re*x[ix][0] - alpha_im*x[ix][1]; // alpha P x
                        y[iy][1] += alpha_re*x[ix][1] + alpha_im*x[ix][0]; // y
                    }
                }
            } else if (beta_is_real) {
                for (int i = 0; i < n; ++i) {
                    for (int j = i; j < N; j += n, iy += incy) {
                        const int ix = j*incx;
                        y[iy][0] *= beta_re;                               // beta y
                        y[iy][1] *= beta_re;
                        y[iy][0] += alpha_re*x[ix][0] - alpha_im*x[ix][1]; // alpha P x
                        y[iy][1] += alpha_re*x[ix][1] + alpha_im*x[ix][0];
                    }
                }
            } else {// beta_is_complex
                for (int i = 0; i < n; ++i) {
                    for (int j = i; j < N; j += n, iy += incy) {
                        const int ix = j*incx;
                        COMPONENT tmp[2];
                        tmp[0]   = alpha_re*x[ix][0] - alpha_im*x[ix][1];  // alpha P x
                        tmp[1]   = alpha_re*x[ix][1] + alpha_im*x[ix][0];
                        tmp[0]  += beta_re *y[iy][0] - beta_im *y[iy][1];  // beta y
                        tmp[1]  += beta_re *y[iy][1] + beta_im *y[iy][0];
                        y[iy][0] = tmp[0];
                        y[iy][1] = tmp[1];
                    }
                }
            }
        }

    }

    return 0;
}

#undef COMPONENT
#undef COMPLEX
#undef AFFIXPREC
