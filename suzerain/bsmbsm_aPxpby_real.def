/*--------------------------------------------------------------------------
 *
 * Copyright (C) 2012, 2013 Rhys Ulerich
 * Copyright (C) 2012, 2013 The PECOS Development Team
 * Please see http://pecos.ices.utexas.edu for more information on PECOS.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 *--------------------------------------------------------------------------
 */

/** @file
 * Templated functionality used within bsmbsm.c
 */

// #include-time parameters available followed by a sample usage.
// Each of these are #undef-ed at the end of this template file
//
// #define COMPONENT double  /* Real-valued floating point type         */
// #define AFFIXPREC         /* Prepares BLAS-like names per COMPONENT  */

int
AFFIXPREC(suzerain_bsmbsm_,aPxpby)(
    char trans,
    int S,
    int n,
    const COMPONENT alpha,
    const COMPONENT * restrict x,
    int incx,
    const COMPONENT beta,
    COMPONENT * restrict y,
    int incy)
{
    if (UNLIKELY(S <  0)) return suzerain_blas_xerbla(__func__,  2);
    if (UNLIKELY(n <  0)) return suzerain_blas_xerbla(__func__,  3);
    if (UNLIKELY(x == y)) return suzerain_blas_xerbla(__func__, 58);

    // Adjust for P versus P^T operation
    switch (toupper(trans)) {
    case 'N': break;
    case 'T': S ^= n; n ^= S; S ^= n;  // (S <=> n) ==> (q <=> q^-1)
              break;
    default:  return suzerain_blas_xerbla(__func__, 1);
    }

#pragma warning(push,disable:1572)
    const _Bool alpha_is_one  = (alpha == 1);
    const _Bool beta_is_zero  = (beta  == 0);
    const _Bool beta_is_one   = (beta  == 1);
#pragma warning(pop)

    // All loops below iterate linearly across y[i] using x[q(i)].  The odd
    // looking loops employ known suzerain_bsmbsm_q details to avoid incurring
    // integer division costs associated within suzerain_bsmbsm_q.

    // Hoist common constants out of loops
    const int N = S*n;

    // Adjust for possibly negative incy
    int iy = (incy < 0) ? (1 - N)*incy : 0;

    if (incx == 1) {  // x is stride one

        // Dispatch to alpha- and beta-specific loops
        if (alpha_is_one) {
            if        (beta_is_zero) {              // y :=       P x
                for (int i = 0; i < n; ++i) {
                    for (int ix = i; ix < N; ix += n, iy += incy) {
                        y[iy] = x[ix];
                    }
                }
            } else if (beta_is_one) {               // y :=       P x +      y
                for (int i = 0; i < n; ++i) {
                    for (int ix = i; ix < N; ix += n, iy += incy) {
                        y[iy] += x[ix];
                    }
                }
            } else {                                // y :=       P x + beta y
                for (int i = 0; i < n; ++i) {
                    for (int ix = i; ix < N; ix += n, iy += incy) {
                        y[iy] = x[ix] + beta*y[iy];
                    }
                }
            }
        } else {
            if        (beta_is_zero) {              // y := alpha P x
                for (int i = 0; i < n; ++i) {
                    for (int ix = i; ix < N; ix += n, iy += incy) {
                        y[iy] = alpha*x[ix];
                    }
                }
            } else if (beta_is_one) {               // y := alpha P x +      y
                for (int i = 0; i < n; ++i) {
                    for (int ix = i; ix < N; ix += n, iy += incy) {
                        y[iy] += alpha*x[ix];
                    }
                }
            } else {                                // y := alpha P x + beta y
                for (int i = 0; i < n; ++i) {
                    for (int ix = i; ix < N; ix += n, iy += incy) {
                        y[iy] = alpha*x[ix] + beta*y[iy];
                    }
                }
            }
        }

    } else {          // General strides

        // Adjust for possibly negative incx
        if (incx < 0) x += (1 - N)*incx;

        // Dispatch to alpha- and beta-specific loops
        if (alpha_is_one) {
            if        (beta_is_zero) {              // y :=       P x
                for (int i = 0; i < n; ++i) {
                    for (int j = i; j < N; j += n, iy += incy) {
                        y[iy] = x[j*incx];
                    }
                }
            } else if (beta_is_one) {               // y :=       P x +      y
                for (int i = 0; i < n; ++i) {
                    for (int j = i; j < N; j += n, iy += incy) {
                        y[iy] += x[j*incx];
                    }
                }
            } else {                                // y :=       P x + beta y
                for (int i = 0; i < n; ++i) {
                    for (int j = i; j < N; j += n, iy += incy) {
                        y[iy] = x[j*incx] + beta*y[iy];
                    }
                }
            }
        } else {
            if        (beta_is_zero) {              // y := alpha P x
                for (int i = 0; i < n; ++i) {
                    for (int j = i; j < N; j += n, iy += incy) {
                        y[iy] = alpha*x[j*incx];
                    }
                }
            } else if (beta_is_one) {               // y := alpha P x +      y
                for (int i = 0; i < n; ++i) {
                    for (int j = i; j < N; j += n, iy += incy) {
                        y[iy] += alpha*x[j*incx];
                    }
                }
            } else {                                // y := alpha P x + beta y
                for (int i = 0; i < n; ++i) {
                    for (int j = i; j < N; j += n, iy += incy) {
                        y[iy] = alpha*x[j*incx] + beta*y[iy];
                    }
                }
            }
        }

    }

    return 0;
}

#undef COMPONENT
#undef AFFIXPREC

/* vim: ft=c */
