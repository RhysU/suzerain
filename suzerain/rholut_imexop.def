/*--------------------------------------------------------------------------
 *
 * Copyright (C) 2012-2014 Rhys Ulerich
 * Copyright (C) 2012-2014 The PECOS Development Team
 * Please see http://pecos.ices.utexas.edu for more information on PECOS.
 *
 * This file is part of Suzerain.
 *
 * Suzerain is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Suzerain is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Suzerain.  If not, see <http://www.gnu.org/licenses/>.
 *
 *--------------------------------------------------------------------------
 */

/** @file
 * Templated functionality used within rholut_imexop.c
 */

// #include-time parameters available followed by a sample usage.
// Each of these are #undef-ed at the end of this template file
//
// #define FUNCNAME() /* Function name, e.g. suzerain_rholut_imexop_packc */
// #define PACK(x)    /* suzerain_bsmbsm_ ## x ## pack{c,f}               */

void
FUNCNAME()(
        const complex_double phi,
        const double km,
        const double kn,
        const suzerain_rholut_imexop_scenario * const s,
        const suzerain_rholut_imexop_ref      * const r,
        const suzerain_rholut_imexop_refld    * const ld,
        const suzerain_bsplineop_workspace    * const w,
        const int rho_E,
        const int rho_u,
        const int rho_v,
        const int rho_w,
        const int rho,
        complex_double * const buf,
        suzerain_bsmbsm * const A_T,
        complex_double * const patpt,
        const double * a,
        const double * b,
        const double * c)
{
    // When you modify this routine, you must also modify
    // suzerain_rholut_imexop_accumulate so that operator
    // accumulation-without-assembly and assembly match.  The test cases in
    // tests/test_rholut_imexop.cpp are invaluable in checking the coherence of
    // these two pieces of logic.
    //
    // When you modify this routine, you may also need to modify
    // rholut_imexop00.c and rholut_imexop00.def so the zero-zero
    // mode case is handled consistently.

    assert((a && b && c) || (!a && !b && !c)); // All non-NULL or NULL?

    // How many rows and columns of banded submatrices will we build?
    const int nneg = (rho_E >= 0)
                   + (rho_u >= 0) + (rho_v >= 0) + (rho_w >= 0)
                   + (rho   >= 0);

    // Compute the BSMBSM structure and named max_kl, max_ku views of w->D_T.
    *A_T = suzerain_bsmbsm_construct(nneg, w->n, w->max_kl, w->max_ku);
    const double * const M  = w->D_T[0] - (w->max_ku - w->ku[0]);
    const double * const D1 = w->D_T[1] - (w->max_ku - w->ku[1]);
    const double * const D2 = w->D_T[2] - (w->max_ku - w->ku[2]);
    assert(w->nderiv >= 2);         // Enough derivatives in workspace?
    assert(A_T->ld == w->ld);       // Compatible storage?

    // Prepare shorthand for some useful derived values
    const complex_double ikm = _Complex_I*km;
    const complex_double ikn = _Complex_I*kn;
    const double km2         = km*km;
    const double kn2         = kn*kn;
    const double gm1         = s->gamma - 1;
    const double gm3         = s->gamma - 3;
    const double ap43        = s->alpha + 4.0/3.0;
    const double ap13        = s->alpha + 1.0/3.0;
    const double Ma2         = s->Ma*s->Ma;
    const double invRe       = 1 / s->Re;
    const double invMa2      = 1 / Ma2;
    const double ginvPr      = s->gamma / s->Pr;
    const double ginvRePr    = s->gamma / (s->Re * s->Pr);

    // We do not know the leading dimension associated with the definition of
    // PACK() so we must overwrite every possible submatrix within PATPT.
    // This is only suboptimal for the zero (rho, rho_E) submatrix and
    // brings with it much flexibility.

    // This routine assembles the transpose of the operator and hence the
    // equation indices are transposed in calls to PACK(...)(...) and we right
    // multiply the transpose of the discrete operators by diagonal matrices.

    // The provided buf may contain INFs or NaNs.  Defensively zero it.
    // Also serves to (possibly) bring the buffer into cache for accumulation.
    assert(buf);
    memset(buf, 0, A_T->ld*A_T->n*sizeof(buf[0]));

    // Shorthand for common patterns below
#   define REF(quantity) r->quantity, ld->quantity
#   define PREAMBLE      'R', A_T->n, A_T->n, A_T->kl, A_T->ku

    if (rho_E >= 0) { // Prepare total energy row

        // On diagonal, mass accumulated last to avoid swamping small values.
        // The factor phi is accounted for in this final mass accumulation.
        /* rho_E */ {
            suzerain_blasext_zgb_dddiag_scale_acc_d(PREAMBLE,
                    -s->gamma*ikm,               REF(ux),
                    -s->gamma*ikn,               REF(uz),
                    -ginvRePr*(km2+kn2),         REF(nu),
                    M,  1, w->ld, 0.0, buf, 1, A_T->ld);

            suzerain_blasext_zgb_diag_scale_acc_d(PREAMBLE,
                    -s->gamma,                   REF(uy),
                    D1, 1, w->ld, 1.0, buf, 1, A_T->ld);

            suzerain_blasext_zgb_diag_scale_acc_d(PREAMBLE,
                    ginvRePr,                    REF(nu),
                    D2, 1, w->ld, 1.0, buf, 1, A_T->ld);

            suzerain_blas_zgb_acc_d(
                    A_T->n, A_T->n, A_T->kl, A_T->ku,
                    1, M, w->ld, phi, buf, A_T->ld);

            PACK(z)(A_T, rho_E, rho_E, 1.0, buf, patpt);
        }

        if (rho_u >= 0) {
            const double coeff_nuux
                = Ma2*invRe*((ginvPr-ap43)*km2 + (ginvPr-1)*kn2);
            suzerain_blasext_zgb_dddiag_scale_acc_d(PREAMBLE,
                    coeff_nuux,                  REF(nuux),
                    -Ma2*invRe*ap13*km*kn,       REF(nuuz),
                    -ikm,                        REF(e_divm),
                    M,  1, w->ld, 0.0, buf, 1, A_T->ld);

            suzerain_blasext_zgb_diag_scale_acc_d(PREAMBLE,
                    Ma2*invRe*ap13*ikm,          REF(nuuy),
                    D1, 1, w->ld, 1.0, buf, 1, A_T->ld);

            suzerain_blasext_zgb_diag_scale_acc_d(PREAMBLE,
                    Ma2*invRe*(1-ginvPr),        REF(nuux),
                    D2, 1, w->ld, 1.0, buf, 1, A_T->ld);

            PACK(z)(A_T, rho_u, rho_E, phi, buf, patpt);
        }

        if (rho_v >= 0) {
            const double coeff_nuuy
                = Ma2*invRe*(ginvPr-1)*(km2+kn2);
            suzerain_blasext_zgb_diag_scale_acc_d(PREAMBLE,
                    coeff_nuuy,                  REF(nuuy),
                    M,  1, w->ld, 0.0, buf, 1, A_T->ld);

            suzerain_blasext_zgb_dddiag_scale_acc_d(PREAMBLE,
                    Ma2*invRe*ap13*ikm,          REF(nuux),
                    Ma2*invRe*ap13*ikn,          REF(nuuz),
                    -1.0,                        REF(e_divm),
                    D1, 1, w->ld, 1.0, buf, 1, A_T->ld);

            suzerain_blasext_zgb_diag_scale_acc_d(PREAMBLE,
                    Ma2*invRe*(ap43-ginvPr),     REF(nuuy),
                    D2, 1, w->ld, 1.0, buf, 1, A_T->ld);

            PACK(z)(A_T, rho_v, rho_E, phi, buf, patpt);
        }

        if (rho_w >= 0) {
            const double coeff_nuuz
                = Ma2*invRe*((ginvPr-1)*km2 + (ginvPr-ap43)*kn2);
            suzerain_blasext_zgb_dddiag_scale_acc_d(PREAMBLE,
                    -Ma2*invRe*ap13*km*kn,       REF(nuux),
                    coeff_nuuz,                  REF(nuuz),
                    -ikn,                        REF(e_divm),
                    M,  1, w->ld, 0.0, buf, 1, A_T->ld);

            suzerain_blasext_zgb_diag_scale_acc_d(PREAMBLE,
                    Ma2*invRe*ap13*ikn,          REF(nuuy),
                    D1, 1, w->ld, 1.0, buf, 1, A_T->ld);

            suzerain_blasext_zgb_diag_scale_acc_d(PREAMBLE,
                    Ma2*invRe*(1-ginvPr),        REF(nuuz),
                    D2, 1, w->ld, 1.0, buf, 1, A_T->ld);

            PACK(z)(A_T, rho_w, rho_E, phi, buf, patpt);
        }

        if (rho  >= 0) {
            // Mass terms done in 2 passes to avoid zgb_dddddddiag_scale_acc_d.
            // Writing such a beast may provide a tiny speedup.
            suzerain_blasext_zgb_ddddiag_scale_acc_d(PREAMBLE,
                    Ma2*invRe*(km2+kn2),         REF(nuu2),
                    Ma2*invRe*ap13*km2,          REF(nuuxux),
                    Ma2*invRe*ap13*2*km*kn,      REF(nuuxuz),
                    Ma2*invRe*ap13*kn2,          REF(nuuzuz),
                    M,  1, w->ld, 0.0, buf, 1, A_T->ld);
            suzerain_blasext_zgb_dddiag_scale_acc_d(PREAMBLE,
                    -ikm,                        REF(ex_gradrho),
                    -ikn,                        REF(ez_gradrho),
                    -ginvRePr/gm1*(km2+kn2),     REF(e_deltarho),
                    M,  1, w->ld, 1.0, buf, 1, A_T->ld);

            suzerain_blasext_zgb_dddiag_scale_acc_d(PREAMBLE,
                    -Ma2*invRe*ap13*2*ikm,       REF(nuuxuy),
                    -Ma2*invRe*ap13*2*ikn,       REF(nuuyuz),
                    -1.0,                        REF(ey_gradrho),
                    D1, 1, w->ld, 1.0, buf, 1, A_T->ld);

            suzerain_blasext_zgb_dddiag_scale_acc_d(PREAMBLE,
                    -Ma2*invRe,                  REF(nuu2),
                    -Ma2*invRe*ap13,             REF(nuuyuy),
                    ginvRePr/gm1,                REF(e_deltarho),
                    D2, 1, w->ld, 1.0, buf, 1, A_T->ld);

            PACK(z)(A_T, rho, rho_E, phi, buf, patpt);
        }

    }

    if (rho_u >= 0) { // Prepare streamwise momentum row

        if (rho_E >= 0) {
            const complex_double coeff = -gm1*invMa2*ikm*phi;

            PACK(zd)(A_T, rho_E, rho_u, coeff, M, patpt);
        }

        // On diagonal, mass accumulated last to avoid swamping small values.
        // The factor phi is accounted for in this final mass accumulation.
        /* rho_u */ {
            suzerain_blasext_zgb_dddiag_scale_acc_d(PREAMBLE,
                    gm3*ikm,                     REF(ux),
                    -ikn,                        REF(uz),
                    -invRe*(ap43*km2 + kn2),     REF(nu),
                    M,  1, w->ld, 0.0, buf, 1, A_T->ld);

            suzerain_blasext_zgb_diag_scale_acc_d(PREAMBLE,
                    -1.0,                        REF(uy),
                    D1, 1, w->ld, 1.0, buf, 1, A_T->ld);

            suzerain_blasext_zgb_diag_scale_acc_d(PREAMBLE,
                    invRe,                       REF(nu),
                    D2, 1, w->ld, 1.0, buf, 1, A_T->ld);

            suzerain_blas_zgb_acc_d(
                    A_T->n, A_T->n, A_T->kl, A_T->ku,
                    1, M, w->ld, phi, buf, A_T->ld);

            PACK(z)(A_T, rho_u, rho_u, 1.0, buf, patpt);
        }

        if (rho_v >= 0) {
            suzerain_blasext_zgb_diag_scale_acc_d(PREAMBLE,
                    gm1*ikm,                     REF(uy),
                    M,  1, w->ld, 0.0, buf, 1, A_T->ld);

            suzerain_blasext_zgb_ddiag_scale_acc_d(PREAMBLE,
                    -1.0,                        REF(ux),
                    ap13*invRe*ikm,              REF(nu),
                    D1, 1, w->ld, 1.0, buf, 1, A_T->ld);

            PACK(z)(A_T, rho_v, rho_u, phi, buf, patpt);
        }

        if (rho_w >= 0) {
            suzerain_blasext_zgb_dddiag_scale_acc_d(PREAMBLE,
                     gm1*ikm,                    REF(uz),
                    -ikn,                        REF(ux),
                    -ap13*invRe*km*kn,           REF(nu),
                    M,  1, w->ld, 0.0, buf, 1, A_T->ld);

            PACK(z)(A_T, rho_w, rho_u, phi, buf, patpt);
        }

        if (rho  >= 0) {
            suzerain_blasext_zgb_dddddiag_scale_acc_d(PREAMBLE,
                    -0.5*gm1*ikm,                REF(u2),
                     ikm,                        REF(uxux),
                     ikn,                        REF(uxuz),
                     invRe*(ap43*km2 + kn2),     REF(nuux),
                     ap13*invRe*km*kn,           REF(nuuz),
                    M,  1, w->ld, 0.0, buf, 1, A_T->ld);

            suzerain_blasext_zgb_ddiag_scale_acc_d(PREAMBLE,
                     1.0,                        REF(uxuy),
                    -ap13*invRe*ikm,             REF(nuuy),
                    D1, 1, w->ld, 1.0, buf, 1, A_T->ld);

            suzerain_blasext_zgb_diag_scale_acc_d(PREAMBLE,
                    -invRe,                      REF(nuux),
                    D2, 1, w->ld, 1.0, buf, 1, A_T->ld);

            PACK(z)(A_T, rho, rho_u, phi, buf, patpt);
        }

    }

    if (rho_v >= 0) { // Prepare wall-normal momentum row

        if (rho_E >= 0) {
            const complex_double coeff = -gm1*invMa2*phi;

            PACK(zd)(A_T, rho_E, rho_v, coeff, D1, patpt);
        }

        if (rho_u >= 0) {
            suzerain_blasext_zgb_diag_scale_acc_d(PREAMBLE,
                    -ikm,                 REF(uy),
                    M,  1, w->ld, 0.0, buf, 1, A_T->ld);

            suzerain_blasext_zgb_ddiag_scale_acc_d(PREAMBLE,
                    gm1,                  REF(ux),
                    ap13*invRe*ikm,       REF(nu),
                    D1, 1, w->ld, 1.0, buf, 1, A_T->ld);

            PACK(z)(A_T, rho_u, rho_v, phi, buf, patpt);
        }

        // On diagonal, mass accumulated last to avoid swamping small values.
        // The factor phi is accounted for in this final mass accumulation.
        /* rho_v */ {
            suzerain_blasext_zgb_dddiag_scale_acc_d(PREAMBLE,
                    -ikm,                 REF(ux),
                    -ikn,                 REF(uz),
                    -invRe*(km2+kn2),     REF(nu),
                    M,  1, w->ld, 0.0, buf, 1, A_T->ld);

            suzerain_blasext_zgb_diag_scale_acc_d(PREAMBLE,
                    gm3,                  REF(uy),
                    D1, 1, w->ld, 1.0, buf, 1, A_T->ld);

            suzerain_blasext_zgb_diag_scale_acc_d(PREAMBLE,
                    ap43*invRe,           REF(nu),
                    D2, 1, w->ld, 1.0, buf, 1, A_T->ld);

            suzerain_blas_zgb_acc_d(
                    A_T->n, A_T->n, A_T->kl, A_T->ku,
                    1, M, w->ld, phi, buf, A_T->ld);

            PACK(z)(A_T, rho_v, rho_v, 1.0, buf, patpt);
        }

        if (rho_w >= 0) {
            suzerain_blasext_zgb_diag_scale_acc_d(PREAMBLE,
                    -ikn,                 REF(uy),
                    M,  1, w->ld, 0.0, buf, 1, A_T->ld);

            suzerain_blasext_zgb_ddiag_scale_acc_d(PREAMBLE,
                    gm1,                  REF(uz),
                    ap13*invRe*ikn,       REF(nu),
                    D1, 1, w->ld, 1.0, buf, 1, A_T->ld);

            PACK(z)(A_T, rho_w, rho_v, phi, buf, patpt);
        }

        if (rho  >= 0) {
            suzerain_blasext_zgb_dddiag_scale_acc_d(PREAMBLE,
                    ikm,                  REF(uxuy),
                    ikn,                  REF(uyuz),
                    invRe*(km2+kn2),      REF(nuuy),
                    M,  1, w->ld, 0.0, buf, 1, A_T->ld);

            suzerain_blasext_zgb_ddddiag_scale_acc_d(PREAMBLE,
                    -0.5*gm1,             REF(u2),
                     1.0,                 REF(uyuy),
                    -ap13*invRe*ikm,      REF(nuux),
                    -ap13*invRe*ikn,      REF(nuuz),
                    D1, 1, w->ld, 1.0, buf, 1, A_T->ld);

            suzerain_blasext_zgb_diag_scale_acc_d(PREAMBLE,
                    -ap43*invRe,          REF(nuuy),
                    D2, 1, w->ld, 1.0, buf, 1, A_T->ld);

            PACK(z)(A_T, rho, rho_v, phi, buf, patpt);
        }

    }

    if (rho_w >= 0) { // Prepare spanwise momentum row

        if (rho_E >= 0) {
            const complex_double coeff = -gm1*invMa2*ikn*phi;

            PACK(zd)(A_T, rho_E, rho_w, coeff, M, patpt);
        }

        if (rho_u >= 0) {
            suzerain_blasext_zgb_dddiag_scale_acc_d(PREAMBLE,
                     gm1*ikn,                    REF(ux),
                    -ikm,                        REF(uz),
                    -ap13*invRe*km*kn,           REF(nu),
                    M,  1, w->ld, 0.0, buf, 1, A_T->ld);

            PACK(z)(A_T, rho_u, rho_w, phi, buf, patpt);
        }

        if (rho_v >= 0) {
            suzerain_blasext_zgb_diag_scale_acc_d(PREAMBLE,
                    gm1*ikn,                     REF(uy),
                    M,  1, w->ld, 0.0, buf, 1, A_T->ld);

            suzerain_blasext_zgb_ddiag_scale_acc_d(PREAMBLE,
                    -1.0,                        REF(uz),
                    ap13*invRe*ikn,              REF(nu),
                    D1, 1, w->ld, 1.0, buf, 1, A_T->ld);

            PACK(z)(A_T, rho_v, rho_w, phi, buf, patpt);
        }

        // On diagonal, mass accumulated last to avoid swamping small values.
        // The factor phi is accounted for in this final mass accumulation.
        /* rho_w */ {
            suzerain_blasext_zgb_dddiag_scale_acc_d(PREAMBLE,
                    -ikm,                        REF(ux),
                    gm3*ikn,                     REF(uz),
                    -invRe*(km2 + ap43*kn2),     REF(nu),
                    M,  1, w->ld, 0.0, buf, 1, A_T->ld);

            suzerain_blasext_zgb_diag_scale_acc_d(PREAMBLE,
                    -1.0,                        REF(uy),
                    D1, 1, w->ld, 1.0, buf, 1, A_T->ld);

            suzerain_blasext_zgb_diag_scale_acc_d(PREAMBLE,
                    invRe,                       REF(nu),
                    D2, 1, w->ld, 1.0, buf, 1, A_T->ld);

            suzerain_blas_zgb_acc_d(
                    A_T->n, A_T->n, A_T->kl, A_T->ku,
                    1, M, w->ld, phi, buf, A_T->ld);

            PACK(z)(A_T, rho_w, rho_w, 1.0, buf, patpt);
        }

        if (rho  >= 0) {
            suzerain_blasext_zgb_dddddiag_scale_acc_d(PREAMBLE,
                    -0.5*gm1*ikn,                REF(u2),
                     ikm,                        REF(uxuz),
                     ikn,                        REF(uzuz),
                     invRe*(km2 + ap43*kn2),     REF(nuuz),
                     ap13*invRe*km*kn,           REF(nuux),
                    M,  1, w->ld, 0.0, buf, 1, A_T->ld);

            suzerain_blasext_zgb_ddiag_scale_acc_d(PREAMBLE,
                     1.0,                        REF(uyuz),
                    -ap13*invRe*ikn,             REF(nuuy),
                    D1, 1, w->ld, 1.0, buf, 1, A_T->ld);

            suzerain_blasext_zgb_diag_scale_acc_d(PREAMBLE,
                    -invRe,                      REF(nuuz),
                    D2, 1, w->ld, 1.0, buf, 1, A_T->ld);

            PACK(z)(A_T, rho, rho_w, phi, buf, patpt);
        }

    }

    if (rho >= 0) {  // Prepare density row

        if (rho_E >= 0) {
            PACK(z)( A_T, rho_E, rho, 0.0, NULL, patpt); // Zero fill
        }

        if (rho_u >= 0) {
            const complex_double coeff = -ikm*phi;

            PACK(zd)(A_T, rho_u, rho, coeff, M, patpt);
        }

        if (rho_v >= 0) {
            const complex_double coeff = -1.0*phi;

            PACK(zd)(A_T, rho_v, rho, coeff, D1, patpt);
        }

        if (rho_w >= 0) {
            const complex_double coeff = -ikn*phi;

            PACK(zd)(A_T, rho_w, rho, coeff, M, patpt);
        }

        /* rho */ {
            PACK(zd)(A_T, rho,  rho, 1.0, M, patpt);
        }

    }

#   undef REF
#   undef PREAMBLE

}

#undef FUNCNAME
#undef PACK

/* vim: set ft=c:   */
/* Local Variables: */
/* mode: c          */
/* End:             */
