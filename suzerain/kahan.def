/*--------------------------------------------------------------------------
 *
 * Copyright (C) 2012 The PECOS Development Team
 * Please see http://pecos.ices.utexas.edu for more information on PECOS.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 *--------------------------------------------------------------------------
 * kahan.def: templated functionality for kahan.c
 * $Id$
 */

// -no-unsafe-math-optimizations or similar should be enable for compilation!

// #include-time parameters available followed by a sample usage.
// Each of these are #undef-ed at the end of this template file
//
// #define NAME(infix,affix) /* Naming like pre##infix##post##affix */
// #define SCALAR    double  /* Type of coeffs and vectors */

// Algorithm from http://en.wikipedia.org/wiki/Kahan_summation_algorithm
SCALAR NAME(kahan,)(const SCALAR * a, int n)
{
    SCALAR s, t, c, y;
    int i;

    s = 0, c = 0;
    for (i = 0; i < n; ++i) {
        y = a[i] - c;
        t = s + y;
        c = (t - s) - y;
        s = t;
    }
    return s;
}

// Unrolled Kahan summation algorithm for n == 3
SCALAR NAME(kahan,3)(const SCALAR a0,
                     const SCALAR a1,
                     const SCALAR a2)
{
    SCALAR s, t, c, y;

    s = a0;
    t = s + a1;
    c = (t - s) - a1;
    s = t;

    y = a2 - c;
    t = s + y;
    c = (t - s) - y;
    s = t;

    return s;
}

// Unrolled Kahan summation algorithm for n == 4
SCALAR NAME(kahan,4)(const SCALAR a0,
                     const SCALAR a1,
                     const SCALAR a2,
                     const SCALAR a3)
{
    SCALAR s, t, c, y;

    s = a0;
    t = s + a1;
    c = (t - s) - a1;
    s = t;

    y = a2 - c;
    t = s + y;
    c = (t - s) - y;
    s = t;

    y = a3 - c;
    t = s + y;
    c = (t - s) - y;
    s = t;

    return s;
}

// Unrolled Kahan summation algorithm for n == 5
SCALAR NAME(kahan,5)(const SCALAR a0,
                     const SCALAR a1,
                     const SCALAR a2,
                     const SCALAR a3,
                     const SCALAR a4)
{
    SCALAR s, t, c, y;

    s = a0;
    t = s + a1;
    c = (t - s) - a1;
    s = t;

    y = a2 - c;
    t = s + y;
    c = (t - s) - y;
    s = t;

    y = a3 - c;
    t = s + y;
    c = (t - s) - y;
    s = t;

    y = a4 - c;
    t = s + y;
    c = (t - s) - y;
    s = t;

    return s;
}

#undef NAME
#undef SCALAR
