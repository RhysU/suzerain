// Nondimensional, Favre-averaged Navier--Stokes residual for a perfect gas.
// Follows "Sampling logistics" withing the Suzerain perfect gas write up.

tilde_u = bar_rho_u/bar_rho;
tilde_v = bar_rho_v/bar_rho;
tilde_w = bar_rho_w/bar_rho;
tilde_E = bar_rho_E/bar_rho;
tilde_u_u = bar_rho_u_u/bar_rho;
tilde_u_v = bar_rho_u_v/bar_rho;
tilde_u_w = bar_rho_u_w/bar_rho;
tilde_v_v = bar_rho_v_v/bar_rho;
tilde_v_w = bar_rho_v_w/bar_rho;
tilde_w_w = bar_rho_w_w/bar_rho;
tilde_upp_upp = tilde_u_u - tilde_u**2;
tilde_upp_vpp = tilde_u_v - tilde_u*tilde_v;
tilde_upp_wpp = tilde_u_w - tilde_u*tilde_w;
tilde_vpp_vpp = tilde_v_v - tilde_v**2;
tilde_vpp_wpp = tilde_v_w - tilde_v*tilde_w;
tilde_wpp_wpp = tilde_w_w - tilde_w**2;
tilde_k = (tilde_upp_upp + tilde_vpp_vpp + tilde_wpp_wpp) / 2;
tilde_T = (gamma*(gamma-1))*(tilde_E - Ma*Ma*(
              (  tilde_u**2
               + tilde_v**2
               + tilde_w**2 ) / 2
           +  tilde_k
           ));
tilde_H = tilde_E + tilde_T/gamma;

// FIXME Start here

D(tilde_u);  // Form derivatives
D(tilde_v);  // Form derivatives
D(tilde_w);  // Form derivatives

C(bar_tau_colon_grad_upp) = C(bar_tau_colon_grad_u)
                          - C(bar_tauxy)*C(tilde_u__y)
                          - C(bar_tauyy)*C(tilde_v__y)
                          - C(bar_tauyz)*C(tilde_w__y);
C(tilde_epsilon) = C(bar_tau_colon_grad_upp)/C(bar_rho);
C(bar_rhop_up) = C(bar_rho_u) - C(bar_rho)*C(bar_u);
C(bar_rhop_vp) = C(bar_rho_v) - C(bar_rho)*C(bar_v);
C(bar_rhop_wp) = C(bar_rho_w) - C(bar_rho)*C(bar_w);
C(bar_upp) = C(bar_u) - C(tilde_u);
C(bar_vpp) = C(bar_v) - C(tilde_v);
C(bar_wpp) = C(bar_w) - C(tilde_w);
C(bar_f_dot_upp) = C(bar_f_dot_u)
                 - C(bar_fx) * C(tilde_u)
                 - C(bar_fy) * C(tilde_v)
                 - C(bar_fz) * C(tilde_w);
C(bar_Srhou_dot_upp) = C(bar_Srhou_dot_u)
                     - C(bar_Srhou) * C(tilde_u)
                     - C(bar_Srhov) * C(tilde_v)
                     - C(bar_Srhow) * C(tilde_w);
C(bar_Crhou_dot_upp) = C(bar_Crhou_dot_u)
                     - C(bar_Crhou) * C(tilde_u)
                     - C(bar_Crhov) * C(tilde_v)
                     - C(bar_Crhow) * C(tilde_w);
C(bar_tauuppx) = C(bar_tauux)
               - C(bar_tauxx)*C(tilde_u)
               - C(bar_tauxy)*C(tilde_v)
               - C(bar_tauxz)*C(tilde_w);
C(bar_tauuppy) = C(bar_tauuy)
               - C(bar_tauxy)*C(tilde_u)
               - C(bar_tauyy)*C(tilde_v)
               - C(bar_tauyz)*C(tilde_w);
C(bar_tauuppz) = C(bar_tauuz)
               - C(bar_tauxz)*C(tilde_u)
               - C(bar_tauyz)*C(tilde_v)
               - C(bar_tauzz)*C(tilde_w);
D(bar_v);  // Form derivatives
C(bar_pp_div_upp) = C(bar_p_div_u) - C(bar_p)*C(bar_v__y);
C(tilde_u_u_u) = C(bar_rho_u_u_u)/C(bar_rho);
C(tilde_u_u_v) = C(bar_rho_u_u_v)/C(bar_rho);
C(tilde_u_u_w) = C(bar_rho_u_u_w)/C(bar_rho);
C(tilde_u_v_v) = C(bar_rho_u_v_v)/C(bar_rho);
C(tilde_u_v_w) = C(bar_rho_u_v_w)/C(bar_rho);
C(tilde_u_w_w) = C(bar_rho_u_w_w)/C(bar_rho);
C(tilde_v_v_v) = C(bar_rho_v_v_v)/C(bar_rho);
C(tilde_v_v_w) = C(bar_rho_v_v_w)/C(bar_rho);
C(tilde_v_w_w) = C(bar_rho_v_w_w)/C(bar_rho);
C(tilde_w_w_w) = C(bar_rho_w_w_w)/C(bar_rho);
C(tilde_u2u) = C(tilde_u_u_u) + C(tilde_u_v_v) + C(tilde_u_w_w);
C(tilde_u2v) = C(tilde_u_u_v) + C(tilde_v_v_v) + C(tilde_v_w_w);
C(tilde_u2w) = C(tilde_u_u_w) + C(tilde_v_v_w) + C(tilde_w_w_w);
C(tilde_upp2upp) = C(tilde_u2u)
                 - (C(tilde_u_u) + C(tilde_v_v) + C(tilde_w_w))*C(tilde_u)
                 - 2*(C(tilde_u_u)*C(tilde_u) + C(tilde_u_v)*C(tilde_v) + C(tilde_u_w)*C(tilde_w))
                 + 2*(C(tilde_u).square() + C(tilde_v).square() + C(tilde_w).square())*C(tilde_u);
C(tilde_upp2vpp) = C(tilde_u2v)
                 - (C(tilde_u_u) + C(tilde_v_v) + C(tilde_w_w))*C(tilde_v)
                 - 2*(C(tilde_u_v)*C(tilde_u) + C(tilde_v_v)*C(tilde_v) + C(tilde_v_w)*C(tilde_w))
                 + 2*(C(tilde_u).square() + C(tilde_v).square() + C(tilde_w).square())*C(tilde_v);
C(tilde_upp2wpp) = C(tilde_u2w)
                 - (C(tilde_u_u) + C(tilde_v_v) + C(tilde_w_w))*C(tilde_w)
                 - 2*(C(tilde_u_w)*C(tilde_u) + C(tilde_v_w)*C(tilde_v) + C(tilde_w_w)*C(tilde_w))
                 + 2*(C(tilde_u).square() + C(tilde_v).square() + C(tilde_w).square())*C(tilde_w);
C(tilde_T_u) = C(bar_rho_T_u)/C(bar_rho);
C(tilde_T_v) = C(bar_rho_T_v)/C(bar_rho);
C(tilde_T_w) = C(bar_rho_T_w)/C(bar_rho);
C(tilde_Tpp_upp) = C(tilde_T_u) - C(tilde_T)*C(tilde_u);
C(tilde_Tpp_vpp) = C(tilde_T_v) - C(tilde_T)*C(tilde_v);
C(tilde_Tpp_wpp) = C(tilde_T_w) - C(tilde_T)*C(tilde_w);
C(tilde_mu) = C(bar_rho_mu)/C(bar_rho);
C(bar_mupp) = C(bar_mu) - C(tilde_mu);
C(tilde_nu) = C(bar_mu)/C(bar_rho);
C(bar_nupp) = C(bar_nu) - C(tilde_nu);
C(tilde_symxx_grad_u) = C(bar_symxx_rho_grad_u)/C(bar_rho);
C(tilde_symxy_grad_u) = C(bar_symxy_rho_grad_u)/C(bar_rho);
C(tilde_symxz_grad_u) = C(bar_symxz_rho_grad_u)/C(bar_rho);
C(tilde_symyy_grad_u) = C(bar_symyy_rho_grad_u)/C(bar_rho);
C(tilde_symyz_grad_u) = C(bar_symyz_rho_grad_u)/C(bar_rho);
C(tilde_symzz_grad_u) = C(bar_symzz_rho_grad_u)/C(bar_rho);
C(tilde_Sxx) = C(tilde_symxx_grad_u)
             - (C(tilde_symxx_grad_u) + C(tilde_symyy_grad_u) + C(tilde_symzz_grad_u)) / 3;
C(tilde_Sxy) = C(tilde_symxy_grad_u);
C(tilde_Sxz) = C(tilde_symxz_grad_u);
C(tilde_Syy) = C(tilde_symyy_grad_u)
             - (C(tilde_symxx_grad_u) + C(tilde_symyy_grad_u) + C(tilde_symzz_grad_u)) / 3;
C(tilde_Syz) = C(tilde_symyz_grad_u);
C(tilde_Szz) = C(tilde_symzz_grad_u)
             - (C(tilde_symxx_grad_u) + C(tilde_symyy_grad_u) + C(tilde_symzz_grad_u)) / 3;
C(tilde_nupp_Sppxx) = C(bar_mu_Sxx)/C(bar_rho) - C(tilde_nu)*C(tilde_Sxx);
C(tilde_nupp_Sppxy) = C(bar_mu_Sxy)/C(bar_rho) - C(tilde_nu)*C(tilde_Sxy);
C(tilde_nupp_Sppxz) = C(bar_mu_Sxz)/C(bar_rho) - C(tilde_nu)*C(tilde_Sxz);
C(tilde_nupp_Sppyy) = C(bar_mu_Syy)/C(bar_rho) - C(tilde_nu)*C(tilde_Syy);
C(tilde_nupp_Sppyz) = C(bar_mu_Syz)/C(bar_rho) - C(tilde_nu)*C(tilde_Syz);
C(tilde_nupp_Sppzz) = C(bar_mu_Szz)/C(bar_rho) - C(tilde_nu)*C(tilde_Szz);
C(tilde_nupp_div_upp) = C(bar_mu_div_u)/C(bar_rho)
                      - C(tilde_nu)*(C(tilde_symxx_grad_u) + C(tilde_symyy_grad_u) + C(tilde_symzz_grad_u));
C(tilde_nupp_gradxTpp) = (C(bar_mu_gradx_T) - C(tilde_nu)*C(bar_rho_gradx_T))/C(bar_rho);
C(tilde_nupp_gradyTpp) = (C(bar_mu_grady_T) - C(tilde_nu)*C(bar_rho_grady_T))/C(bar_rho);
C(tilde_nupp_gradzTpp) = (C(bar_mu_gradz_T) - C(tilde_nu)*C(bar_rho_gradz_T))/C(bar_rho);

    // Differentiate SAMPLED
    // Uses that bar_rho{,__y,__yy} is the first entry in SAMPLED{,_Y,_YY}
    s->middleCols<BOOST_PP_SEQ_SIZE(SEQ_SAMPLED_Y)>(quantity::bar_rho__y)
        = s->middleCols<BOOST_PP_SEQ_SIZE(SEQ_SAMPLED)>(quantity::bar_rho);
    boplu->solve(BOOST_PP_SEQ_SIZE(SEQ_SAMPLED_Y),
            s->middleCols<BOOST_PP_SEQ_SIZE(SEQ_SAMPLED_Y)>(quantity::bar_rho__y).data(),
            1, b->n());
    s->middleCols<BOOST_PP_SEQ_SIZE(SEQ_SAMPLED_YY)>(quantity::bar_rho__yy)
        = s->middleCols<BOOST_PP_SEQ_SIZE(SEQ_SAMPLED_Y)>(quantity::bar_rho__y);
    cop->apply(1, BOOST_PP_SEQ_SIZE(SEQ_SAMPLED_Y), 1.0,
            s->middleCols<BOOST_PP_SEQ_SIZE(SEQ_SAMPLED_Y)>(quantity::bar_rho__y).data(),
            1, b->n());
    cop->apply(2, BOOST_PP_SEQ_SIZE(SEQ_SAMPLED_Y), 1.0,
            s->middleCols<BOOST_PP_SEQ_SIZE(SEQ_SAMPLED_YY)>(quantity::bar_rho__yy).data(),
            1, b->n());

    // Differentiate DERIVED
    // Uses that tilde_u{,__y,__yy} is the first entry in DERIVED{,_Y,_YY}
    s->middleCols<BOOST_PP_SEQ_SIZE(SEQ_DERIVED_Y)>(quantity::tilde_u__y)
        = s->middleCols<BOOST_PP_SEQ_SIZE(SEQ_DERIVED)>(quantity::tilde_u);
    boplu->solve(BOOST_PP_SEQ_SIZE(SEQ_DERIVED_Y),
            s->middleCols<BOOST_PP_SEQ_SIZE(SEQ_DERIVED_Y)>(quantity::tilde_u__y).data(),
            1, b->n());
    s->middleCols<BOOST_PP_SEQ_SIZE(SEQ_DERIVED_YY)>(quantity::tilde_u__yy)
        = s->middleCols<BOOST_PP_SEQ_SIZE(SEQ_DERIVED_Y)>(quantity::tilde_u__y);
    cop->apply(1, BOOST_PP_SEQ_SIZE(SEQ_DERIVED_Y), 1.0,
            s->middleCols<BOOST_PP_SEQ_SIZE(SEQ_DERIVED_Y)>(quantity::tilde_u__y).data(),
            1, b->n());
    cop->apply(2, BOOST_PP_SEQ_SIZE(SEQ_DERIVED_Y), 1.0,
            s->middleCols<BOOST_PP_SEQ_SIZE(SEQ_DERIVED_YY)>(quantity::tilde_u__yy).data(),
            1, b->n());

    // Computations of local quantities (see descriptions for definitions).
    // This must occur after differentiation of SAMPLED and DERIVED.
    // Note the following:
    //
    // 1)  In local_Mat computation, ".abs()" is present to avoid taking the
    // square root of very small, negative tilde_k arising from negative
    // tilde_{upp_upp,vpp_vpp_vpp} in laminar situations due to round off
    // errors (i.e. tilde_u_u - tilde_u**2 ~= -eps).
    //
    // 2)  In local_Re computation, the coefficient scenario.Re arises because
    // (bar_rho_u * L / bar_mu) are already nondimensional.  Multiplying by Re
    // re-incorporates the reference quantities rho_0, u_0, L_0, and mu_0 to
    // cause the nondimensional local_Re to be correctly formed from
    // dimensional quantities.  Ditto for Re in the eddy viscosity. Ditto for
    // Ma in local_Ma and local_Mat.
    C(local_Ma)  = Ma * C(bar_u) / C(bar_a);
    C(local_Mat) = Ma * (std::sqrt(real_t(2))*C(tilde_k).abs().sqrt()) / C(bar_a);
    C(local_Prt) = (C(tilde_upp_vpp) * C(tilde_T__y)) / (C(tilde_Tpp_vpp) * C(tilde_u__y));
    C(local_nut) = - Re * C(tilde_upp_vpp) / C(tilde_u__y);
    C(local_Re)  = Re * C(bar_rho_u) /* L = 1 */ / C(bar_mu);

    // Computation of Favre-averaged density equation residual following writeup
    C(bar_rho__t) =
        // - \nabla\cdot\bar{\rho}\tilde{u}
           - C(bar_rho_v__y)
        // + \overline{\mathscr{S}_{\rho}}
           + C(bar_Srho)
        // + \overline{\mathscr{C}_{\rho}}
           + C(bar_Crho)
        ;

    // Computation of Favre-averaged streamwise momentum residual following writeup
    C(bar_rho_u__t) =
        // - \nabla\cdot(\tilde{u}\otimes\bar{\rho}\tilde{u})
           - C(tilde_v)*C(bar_rho_u__y) - C(bar_rho_u)*C(tilde_v__y)
        // - \frac{1}{\Mach^2}\nabla{}\bar{p}
           - 0
        // + \nabla\cdot\left( \frac{\bar{\tau}}{\Reynolds} \right)
           + C(bar_tauxy__y) / Re
        // - \nabla\cdot\left( \bar{\rho} \widetilde{u''\otimes{}u''} \right)
           - C(bar_rho)*C(tilde_upp_vpp__y) - C(tilde_upp_vpp)*C(bar_rho__y)
        // + \bar{f}
           + C(bar_fx)
        // + \overline{\mathscr{S}_{\rho{}u}}
           + C(bar_Srhou)
        // + \overline{\mathscr{C}_{\rho{}u}}
           + C(bar_Crhou)
        ;

    // Computation of Favre-averaged wall-normal momentum residual following writeup
    C(bar_rho_v__t) =
        // - \nabla\cdot(\tilde{u}\otimes\bar{\rho}\tilde{u})
           - C(tilde_v)*C(bar_rho_v__y) - C(bar_rho_v)*C(tilde_v__y)
        // - \frac{1}{\Mach^2}\nabla{}\bar{p}
           - C(bar_p__y)
        // + \nabla\cdot\left( \frac{\bar{\tau}}{\Reynolds} \right)
           + C(bar_tauyy__y) / Re
        // - \nabla\cdot\left( \bar{\rho} \widetilde{u''\otimes{}u''} \right)
           - C(bar_rho)*C(tilde_vpp_vpp__y) - C(tilde_vpp_vpp)*C(bar_rho__y)
        // + \bar{f}
           + C(bar_fy)
        // + \overline{\mathscr{S}_{\rho{}u}}
           + C(bar_Srhov)
        // + \overline{\mathscr{C}_{\rho{}u}}
           + C(bar_Crhov)
        ;

    // Computation of Favre-averaged spanwise momentum residual following writeup
    C(bar_rho_w__t) =
        // - \nabla\cdot(\tilde{u}\otimes\bar{\rho}\tilde{u})
           - C(tilde_v)*C(bar_rho_w__y) - C(bar_rho_w)*C(tilde_v__y)
        // - \frac{1}{\Mach^2}\nabla{}\bar{p}
           - 0
        // + \nabla\cdot\left( \frac{\bar{\tau}}{\Reynolds} \right)
           + C(bar_tauyz__y) / Re
        // - \nabla\cdot\left( \bar{\rho} \widetilde{u''\otimes{}u''} \right)
           - C(bar_rho)*C(tilde_vpp_wpp__y) - C(tilde_vpp_wpp)*C(bar_rho__y)
        // + \bar{f}
           + C(bar_fz)
        // + \overline{\mathscr{S}_{\rho{}u}}
           + C(bar_Srhow)
        // + \overline{\mathscr{C}_{\rho{}u}}
           + C(bar_Crhow)
        ;

    // Computation of Favre-averaged total energy residual following writeup
    C(bar_rho_E__t) =
    // - \nabla\cdot\bar{\rho}\tilde{H}\tilde{u}
       - C(bar_rho_v)*C(tilde_H__y) - C(tilde_H)*C(bar_rho_v__y)
    // + \Mach^{2} \nabla\cdot\left( \frac{\bar{\tau}}{\Reynolds} \right) \tilde{u}
       + (Ma*Ma/Re)*( C(tilde_u)*C(bar_tauxy__y) + C(bar_tauxy)*C(tilde_u__y)
                    + C(tilde_v)*C(bar_tauyy__y) + C(bar_tauyy)*C(tilde_v__y)
                    + C(tilde_w)*C(bar_tauyz__y) + C(bar_tauyz)*C(tilde_w__y) )
    // - \Mach^{2} \nabla\cdot\left( \bar{\rho} \widetilde{u''\otimes{}u''} \right) \tilde{u}
       - (Ma*Ma)*( C(bar_rho_u)*C(tilde_upp_vpp__y) + C(tilde_upp_vpp)*C(bar_rho_u__y)
                 + C(bar_rho_v)*C(tilde_vpp_vpp__y) + C(tilde_vpp_vpp)*C(bar_rho_v__y)
                 + C(bar_rho_w)*C(tilde_vpp_wpp__y) + C(tilde_vpp_wpp)*C(bar_rho_w__y) )
    // - \frac{1}{2}\Mach^{2} \nabla\cdot\left( \bar{\rho}\widetilde{{u''}^{2}u''} \right)
       - (Ma*Ma/2)*( C(bar_rho)*C(tilde_upp2vpp__y) + C(tilde_upp2vpp)*C(bar_rho__y) )
    // + \Mach^{2} \nabla\cdot\left( \frac{\overline{\tau{}u''}}{\Reynolds} \right)
       + (Ma*Ma/Re)*( C(bar_tauuppy__y) )

    // + \frac{1}{\gamma-1} \nabla\cdot\left(
    //     \frac{ \bar{\mu} \widetilde{\nabla{}T} }{\Reynolds\Prandtl}
    //   \right)
       + (
            C(tilde_nu)*C(bar_rho_grady_T__y) + C(bar_rho_grady_T)*C(tilde_nu__y)
         ) / ((gamma-1)*Re*Pr)
    // + \frac{1}{\gamma-1} \nabla\cdot\left(
    //     \frac{ \bar{\rho} \widetilde{\nu'' \left(\nabla{}T\right)''} }{\Reynolds\Prandtl}
    //   \right)
       + (
            C(bar_rho)*C(tilde_nupp_gradyTpp) + C(tilde_nupp_gradyTpp)*C(bar_rho__y)
         ) / ((gamma-1)*Re*Pr)
    // - \frac{1}{\gamma-1} \nabla\cdot\left( \bar{\rho} \widetilde{T''u''} \right)
       - (
            C(bar_rho)*C(tilde_Tpp_vpp__y) + C(tilde_Tpp_vpp)*C(bar_rho__y)
         ) / (gamma-1)
    // + \Mach^{2} \bar{f}\cdot\tilde{u}
       + Ma*Ma*(C(bar_fx)*C(tilde_u) + C(bar_fy)*C(tilde_v) + C(bar_fz)*C(tilde_w))
    // + \Mach^{2} \overline{f\cdot{}u''}
       + Ma*Ma*C(bar_f_dot_upp)
    // + \bar{q}_b
       + C(bar_qb)
    // + \overline{\mathscr{S}_{\rho{}E}}
       + C(bar_SrhoE)
    // + \overline{\mathscr{C}_{\rho{}E}}
       + C(bar_CrhoE)
        ;

    // Computation of Favre-averaged turbulent kinetic energy residual following writeup
    C(bar_rho_k__t) =
    // - \nabla\cdot\bar{\rho}k\tilde{u}
       - C(bar_rho_v)*C(tilde_k__y) - C(tilde_k)*C(bar_rho_v__y)
    // - \bar{\rho} \widetilde{u''\otimes{}u''} : \nabla\tilde{u}
       - C(bar_rho)*( C(tilde_upp_vpp)*C(tilde_u__y)
                    + C(tilde_vpp_vpp)*C(tilde_v__y)
                    + C(tilde_vpp_wpp)*C(tilde_w__y) )
    // - \frac{\bar{\rho} \epsilon}{\Reynolds}
       - C(bar_rho)*C(tilde_epsilon) / Re
    // - \frac{1}{2}\nabla\cdot\left( \bar{\rho} \widetilde{{u''}^{2}u''} \right)
       - C(bar_rho)*C(tilde_upp2vpp__y)/2 - C(tilde_upp2vpp)*C(bar_rho__y)/2
    // + \nabla\cdot\left( \frac{\overline{\tau{}u''}}{\Reynolds} \right)
       + C(bar_tauuppy__y)/Re
    // + \frac{1}{\Mach^2} \left(
    //       \bar{p}\nabla\cdot\overline{u''}
    //     + \overline{p' \nabla\cdot{}u''}
    //     - \frac{1}{\gamma} \nabla\cdot\bar{\rho} \widetilde{T''u''}
    //   \right)
       + 1/(Ma*Ma)*( C(bar_p)*C(bar_vpp__y)
                   + C(bar_pp_div_upp)
                   - C(bar_rho)*C(tilde_Tpp_vpp__y)/gamma
                   - C(tilde_Tpp_vpp)*C(bar_rho__y)/gamma )
    // + \overline{f\cdot{}u''}
       + C(bar_f_dot_upp)
    // + \overline{\mathscr{S}_{\rho{}u}\cot{}upp}
       + C(bar_Srhou_dot_upp)
    // + \overline{\mathscr{C}_{\rho{}u}\cot{}upp}
       + C(bar_Crhou_dot_upp)
        ;

#undef C
