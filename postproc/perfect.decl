// Nondimensional, Favre-averaged Navier--Stokes residual for a perfect gas.
// Follows "Sampling logistics" withing the Suzerain perfect gas write up.
// Differentiation is automatic whenever '__y' or '__yy' affix applied.
//
// Additional parenthesis are present for multiline statements to facilitate
// translation into valid Python function source using only regexes...
//     sed -e 's/\/\//# /g'       \
//         -e 's/(y)/   /g'       \
//         -e 's/bar_/bar./g'     \
//         -e 's/rms_/rms./g'     \
//         -e 's/tilde_/tilde./g' \
//         -e 's/local_/local./g' \
//         -e 's/tke_/tke./g'     \
//         -e 's/^/    /'
// ...assuming "bar", "tilde", "local", and "tke" are Bunch-like objects...
//     class Bunch(dict):
//         def __init__(self,**kw):
//             dict.__init__(self,kw)
//             self.__dict__ = self
// ...where https://pypi.python.org/pypi/bunch is recommended for use.


// Favre-averaged specific state {
tilde_u = bar_rho_u(y) / bar_rho(y);
tilde_v = bar_rho_v(y) / bar_rho(y);
tilde_w = bar_rho_w(y) / bar_rho(y);
tilde_E = bar_rho_E(y) / bar_rho(y);
// }

// Favre-averaged Reynolds stresses {
tilde_u_u = bar_rho_u_u(y) / bar_rho(y);
tilde_u_v = bar_rho_u_v(y) / bar_rho(y);
tilde_u_w = bar_rho_u_w(y) / bar_rho(y);
tilde_v_v = bar_rho_v_v(y) / bar_rho(y);
tilde_v_w = bar_rho_v_w(y) / bar_rho(y);
tilde_w_w = bar_rho_w_w(y) / bar_rho(y);
// }

// Favre-fluctuating Reynolds stresses {
tilde_upp_upp = tilde_u_u - tilde_u**2;
tilde_upp_vpp = tilde_u_v - tilde_u*tilde_v;
tilde_upp_wpp = tilde_u_w - tilde_u*tilde_w;
tilde_vpp_vpp = tilde_v_v - tilde_v**2;
tilde_vpp_wpp = tilde_v_w - tilde_v*tilde_w;
tilde_wpp_wpp = tilde_w_w - tilde_w**2;
// }

// Reynolds-averaged root-mean-squared-fluctuation profiles {
rms_rho   = sqrt(bar_rho2(y)    - bar_rho(y)   **2);
rms_p     = sqrt(bar_p2(y)      - bar_p(y)     **2);
rms_T     = sqrt(bar_T2(y)      - bar_T(y)     **2);
rms_h0    = sqrt(bar_h02(y)     - bar_h0(y)    **2);
rms_H0    = sqrt(bar_H02(y)     - bar_H0(y)    **2);
rms_mu    = sqrt(bar_mu2(y)     - bar_mu(y)    **2);
rms_nu    = sqrt(bar_nu2(y)     - bar_nu(y)    **2);
rms_Ma    = sqrt(bar_Ma2(y)     - bar_Ma(y)    **2);
rms_u     = sqrt(bar_u_u(y)     - bar_u(y)     **2);
rms_v     = sqrt(bar_v_v(y)     - bar_v(y)     **2);
rms_w     = sqrt(bar_w_w(y)     - bar_w(y)     **2);
rms_omx   = sqrt(bar_omx_omx(y) - bar_omx(y)   **2);
rms_omy   = sqrt(bar_omy_omy(y) - bar_omy(y)   **2);
rms_omz   = sqrt(bar_omz_omz(y) - bar_omz(y)   **2);
rms_Srho  = sqrt(bar_S2rho(y)   - bar_Srho(y)  **2);
rms_Srhou = sqrt(bar_S2rhou(y)  - bar_Srhou(y) **2);
rms_Srhov = sqrt(bar_S2rhov(y)  - bar_Srhov(y) **2);
rms_Srhow = sqrt(bar_S2rhow(y)  - bar_Srhow(y) **2);
rms_SrhoE = sqrt(bar_S2rhoE(y)  - bar_SrhoE(y) **2);
// }

// Favre-averaged turbulent kinetic energy, internal energy, dissipation
// Note "gamma" is the gamma function to SymPy, and so "gam" is chosen.
// {
tilde_k = (tilde_upp_upp + tilde_vpp_vpp + tilde_wpp_wpp) / 2;
tilde_T = ((gam*(gam-1))*(tilde_E - Ma*Ma*(
               (  tilde_u**2
                + tilde_v**2
                + tilde_w**2 ) / 2
            +  tilde_k
            )));
tilde_H = tilde_E + tilde_T / gam;

bar_tau_colon_grad_upp = ( bar_tau_colon_grad_u(y)
                         - bar_tauxy(y) * tilde_u__y
                         - bar_tauyy(y) * tilde_v__y
                         - bar_tauyz(y) * tilde_w__y);

tilde_epsilon = bar_tau_colon_grad_upp / bar_rho(y);
// }

// Reynolds-fluctuating density-velocity correlations {
bar_rhop_up = bar_rho_u(y) - bar_rho(y) * bar_u(y);
bar_rhop_vp = bar_rho_v(y) - bar_rho(y) * bar_v(y);
bar_rhop_wp = bar_rho_w(y) - bar_rho(y) * bar_w(y);
// }

// Favre-fluctuating velocities {
bar_upp = bar_u(y) - tilde_u;
bar_vpp = bar_v(y) - tilde_v;
bar_wpp = bar_w(y) - tilde_w;
// }

// Favre-fluctuating forcing work {
bar_f_dot_upp     = ( bar_f_dot_u(y)
                    - bar_fx(y)    * tilde_u
                    - bar_fy(y)    * tilde_v
                    - bar_fz(y)    * tilde_w);

bar_Srhou_dot_upp = ( bar_Srhou_dot_u(y)
                    - bar_Srhou(y) * tilde_u
                    - bar_Srhov(y) * tilde_v
                    - bar_Srhow(y) * tilde_w);

bar_Crhou_dot_upp = ( bar_Crhou_dot_u(y)
                    - bar_Crhou(y) * tilde_u
                    - bar_Crhov(y) * tilde_v
                    - bar_Crhow(y) * tilde_w);
// }

// Viscous work on the Favre-fluctuating velocity {
bar_tauuppx = ( bar_tauux(y)
              - bar_tauxx(y) * tilde_u
              - bar_tauxy(y) * tilde_v
              - bar_tauxz(y) * tilde_w);

bar_tauuppy = ( bar_tauuy(y)
              - bar_tauxy(y) * tilde_u
              - bar_tauyy(y) * tilde_v
              - bar_tauyz(y) * tilde_w);

bar_tauuppz = ( bar_tauuz(y)
              - bar_tauxz(y) * tilde_u
              - bar_tauyz(y) * tilde_v
              - bar_tauzz(y) * tilde_w);
// }

// Fluctuating pressure/velocity-divergence correlation
bar_pp_div_upp = bar_p_div_u(y) - bar_p(y) * bar_v__y(y);

// Favre-averaged turbulent transport and its wall-normal derivative {
tilde_u_u_u = bar_rho_u_u_u(y) / bar_rho(y);
tilde_u_u_v = bar_rho_u_u_v(y) / bar_rho(y);
tilde_u_u_w = bar_rho_u_u_w(y) / bar_rho(y);
tilde_u_v_v = bar_rho_u_v_v(y) / bar_rho(y);
tilde_u_v_w = bar_rho_u_v_w(y) / bar_rho(y);
tilde_u_w_w = bar_rho_u_w_w(y) / bar_rho(y);
tilde_v_v_v = bar_rho_v_v_v(y) / bar_rho(y);
tilde_v_v_w = bar_rho_v_v_w(y) / bar_rho(y);
tilde_v_w_w = bar_rho_v_w_w(y) / bar_rho(y);
tilde_w_w_w = bar_rho_w_w_w(y) / bar_rho(y);

tilde_u2u = tilde_u_u_u + tilde_u_v_v + tilde_u_w_w;
tilde_u2v = tilde_u_u_v + tilde_v_v_v + tilde_v_w_w;
tilde_u2w = tilde_u_u_w + tilde_v_v_w + tilde_w_w_w;

tilde_upp2upp = ( tilde_u2u
                - (tilde_u_u + tilde_v_v + tilde_w_w)*tilde_u
                - 2*(   tilde_u_u*tilde_u
                      + tilde_u_v*tilde_v
                      + tilde_u_w*tilde_w )
                + 2*(tilde_u**2 + tilde_v**2 + tilde_w**2)*tilde_u);

tilde_upp2vpp = (  tilde_u2v
                - (tilde_u_u + tilde_v_v + tilde_w_w)*tilde_v
                - 2*(   tilde_u_v*tilde_u
                      + tilde_v_v*tilde_v
                      + tilde_v_w*tilde_w )
                + 2*(tilde_u**2 + tilde_v**2 + tilde_w**2)*tilde_v);

tilde_upp2wpp = ( tilde_u2w
                - (tilde_u_u + tilde_v_v + tilde_w_w)*tilde_w
                - 2*(   tilde_u_w*tilde_u
                      + tilde_v_w*tilde_v
                      + tilde_w_w*tilde_w )
                + 2*(tilde_u**2 + tilde_v**2 + tilde_w**2)*tilde_w);
// }

// Favre-averaged temperature-velocity correlations {
tilde_T_u = bar_rho_T_u(y) / bar_rho(y);
tilde_T_v = bar_rho_T_v(y) / bar_rho(y);
tilde_T_w = bar_rho_T_w(y) / bar_rho(y);

tilde_Tpp_upp = tilde_T_u - tilde_T*tilde_u;
tilde_Tpp_vpp = tilde_T_v - tilde_T*tilde_v;
tilde_Tpp_wpp = tilde_T_w - tilde_T*tilde_w;
// }

// Favre-averaged and -fluctuating viscous stress information {

tilde_mu = bar_rho_mu(y) / bar_rho(y);
tilde_nu = bar_mu(y)     / bar_rho(y);

bar_mupp = bar_mu(y) - tilde_mu;
bar_nupp = bar_nu(y) - tilde_nu;

tilde_symxx_grad_u = bar_symxx_rho_grad_u(y) / bar_rho(y);
tilde_symxy_grad_u = bar_symxy_rho_grad_u(y) / bar_rho(y);
tilde_symxz_grad_u = bar_symxz_rho_grad_u(y) / bar_rho(y);
tilde_symyy_grad_u = bar_symyy_rho_grad_u(y) / bar_rho(y);
tilde_symyz_grad_u = bar_symyz_rho_grad_u(y) / bar_rho(y);
tilde_symzz_grad_u = bar_symzz_rho_grad_u(y) / bar_rho(y);

tilde_Sxx = ( tilde_symxx_grad_u
            - (tilde_symxx_grad_u + tilde_symyy_grad_u + tilde_symzz_grad_u)/3);
tilde_Sxy =   tilde_symxy_grad_u;
tilde_Sxz =   tilde_symxz_grad_u;
tilde_Syy = ( tilde_symyy_grad_u
            - (tilde_symxx_grad_u + tilde_symyy_grad_u + tilde_symzz_grad_u)/3);
tilde_Syz =   tilde_symyz_grad_u;
tilde_Szz = ( tilde_symzz_grad_u
            - (tilde_symxx_grad_u + tilde_symyy_grad_u + tilde_symzz_grad_u)/3);

tilde_nupp_Sppxx = bar_mu_Sxx(y) / bar_rho(y) - tilde_nu * tilde_Sxx;
tilde_nupp_Sppxy = bar_mu_Sxy(y) / bar_rho(y) - tilde_nu * tilde_Sxy;
tilde_nupp_Sppxz = bar_mu_Sxz(y) / bar_rho(y) - tilde_nu * tilde_Sxz;
tilde_nupp_Sppyy = bar_mu_Syy(y) / bar_rho(y) - tilde_nu * tilde_Syy;
tilde_nupp_Sppyz = bar_mu_Syz(y) / bar_rho(y) - tilde_nu * tilde_Syz;
tilde_nupp_Sppzz = bar_mu_Szz(y) / bar_rho(y) - tilde_nu * tilde_Szz;

tilde_nupp_div_upp = ( bar_mu_div_u(y) / bar_rho(y)
                     - tilde_nu*(  tilde_symxx_grad_u
                                 + tilde_symyy_grad_u
                                 + tilde_symzz_grad_u));

tilde_nupp_gradxTpp = ( (bar_mu_gradx_T(y) - tilde_nu * bar_rho_gradx_T(y))
                      / bar_rho(y) );
tilde_nupp_gradyTpp = ( (bar_mu_grady_T(y) - tilde_nu * bar_rho_grady_T(y))
                      / bar_rho(y) );
tilde_nupp_gradzTpp = ( (bar_mu_gradz_T(y) - tilde_nu * bar_rho_gradz_T(y))
                      / bar_rho(y) );

// }


// Computations of local quantities:
//
// 1)  In local_Mat computation, "Abs()" may need to present to avoid taking the
// square root of very small, negative tilde_k arising from negative
// tilde_{upp_upp,vpp_vpp_vpp} in laminar situations due to round off errors
// (i.e. tilde_u_u - tilde_u**2 ~= -eps).
//
// 2)  In local_Re computation, the coefficient Re arises because (bar_rho_u * L
// / bar_mu) are already nondimensional.  Multiplying by Re re-incorporates the
// reference quantities rho_0, u_0, L_0, and mu_0 to cause the nondimensional
// local_Re to be correctly formed from dimensional quantities.  Ditto for Re in
// the eddy viscosity. Ditto for Ma in local_Ma and local_Mat.
// {

// Local Mach number
local_Ma  = Ma * bar_u(y) / bar_a(y);

// Local turbulent Mach number
local_Mat = Ma * (sqrt(2*tilde_k)) / bar_a(y);

// Local turbulent Prandtl number
local_Prt = (tilde_upp_vpp * tilde_T__y) / (tilde_Tpp_vpp * tilde_u__y);

// Local eddy viscosity
local_nut = - Re * tilde_upp_vpp / tilde_u__y;

// Local Reynolds number based on wall-normal distance y
// See Huang et al 1995 (doi:10.1017/s0022112095004599) for why not bar_rho_u
local_Re  = Re * (bar_rho(y) * bar_u(y) * y) / bar_mu(y);
// }

// Computation of Favre-averaged density equation residual per writeup {
bar_rho__t = (
    // - \nabla\cdot\bar{\rho}\tilde{u}
       - bar_rho_v__y(y)
    // + \overline{\mathscr{S}_{\rho}}
       + bar_Srho(y)
    // + \overline{\mathscr{C}_{\rho}}
       + bar_Crho(y)
    );
// }

// Computation of Favre-averaged streamwise momentum residual per writeup {
bar_rho_u__t = (
    // - \nabla\cdot(\tilde{u}\otimes\bar{\rho}\tilde{u})
       - tilde_v*bar_rho_u__y(y) - bar_rho_u(y)*tilde_v__y
    // - \frac{1}{\Mach^2}\nabla{}\bar{p}
       - 0
    // + \nabla\cdot\left( \frac{\bar{\tau}}{\Reynolds} \right)
       + bar_tauxy__y(y) / Re
    // - \nabla\cdot\left( \bar{\rho} \widetilde{u''\otimes{}u''} \right)
       - bar_rho(y)*tilde_upp_vpp__y - tilde_upp_vpp*bar_rho__y(y)
    // + \bar{f}
       + bar_fx(y)
    // + \overline{\mathscr{S}_{\rho{}u}}
       + bar_Srhou(y)
    // + \overline{\mathscr{C}_{\rho{}u}}
       + bar_Crhou(y)
    );
// }

// Computation of Favre-averaged wall-normal momentum residual per writeup {
bar_rho_v__t = (
    // - \nabla\cdot(\tilde{u}\otimes\bar{\rho}\tilde{u})
       - tilde_v*bar_rho_v__y(y) - bar_rho_v(y)*tilde_v__y
    // - \frac{1}{\Mach^2}\nabla{}\bar{p}
       - bar_p__y(y) / Ma**2
    // + \nabla\cdot\left( \frac{\bar{\tau}}{\Reynolds} \right)
       + bar_tauyy__y(y) / Re
    // - \nabla\cdot\left( \bar{\rho} \widetilde{u''\otimes{}u''} \right)
       - bar_rho(y)*tilde_vpp_vpp__y - tilde_vpp_vpp*bar_rho__y(y)
    // + \bar{f}
       + bar_fy(y)
    // + \overline{\mathscr{S}_{\rho{}u}}
       + bar_Srhov(y)
    // + \overline{\mathscr{C}_{\rho{}u}}
       + bar_Crhov(y)
    );
// }

// Computation of Favre-averaged spanwise momentum residual per writeup {
bar_rho_w__t = (
    // - \nabla\cdot(\tilde{u}\otimes\bar{\rho}\tilde{u})
       - tilde_v*bar_rho_w__y(y) - bar_rho_w(y)*tilde_v__y
    // - \frac{1}{\Mach^2}\nabla{}\bar{p}
       - 0
    // + \nabla\cdot\left( \frac{\bar{\tau}}{\Reynolds} \right)
       + bar_tauyz__y(y) / Re
    // - \nabla\cdot\left( \bar{\rho} \widetilde{u''\otimes{}u''} \right)
       - bar_rho(y)*tilde_vpp_wpp__y(y) - tilde_vpp_wpp*bar_rho__y(y)
    // + \bar{f}
       + bar_fz(y)
    // + \overline{\mathscr{S}_{\rho{}u}}
       + bar_Srhow(y)
    // + \overline{\mathscr{C}_{\rho{}u}}
       + bar_Crhow(y)
    );
// }

// Computation of Favre-averaged total energy residual per writeup {
bar_rho_E__t = (
    // - \nabla\cdot\bar{\rho}\tilde{H}\tilde{u}
       - bar_rho_v(y)*tilde_H__y - tilde_H*bar_rho_v__y(y)
    // + \Mach^{2} \nabla\cdot\left(
    //       \frac{\bar{\tau}}{\Reynolds}
    //   \right) \tilde{u}
       + (Ma**2/Re)*( tilde_u*bar_tauxy__y(y) + bar_tauxy(y)*tilde_u__y
                    + tilde_v*bar_tauyy__y(y) + bar_tauyy(y)*tilde_v__y
                    + tilde_w*bar_tauyz__y(y) + bar_tauyz(y)*tilde_w__y )
    // - \Mach^{2} \nabla\cdot\left(
    //       \bar{\rho} \widetilde{u''\otimes{}u''}
    //   \right) \tilde{u}
       - (Ma**2)*( bar_rho_u(y)*tilde_upp_vpp__y+tilde_upp_vpp*bar_rho_u__y(y)
                 + bar_rho_v(y)*tilde_vpp_vpp__y+tilde_vpp_vpp*bar_rho_v__y(y)
                 + bar_rho_w(y)*tilde_vpp_wpp__y+tilde_vpp_wpp*bar_rho_w__y(y) )
    // - \frac{1}{2}\Mach^{2} \nabla\cdot\left(
    //       \bar{\rho}\widetilde{{u''}^{2}u''}
    //   \right)
       - (Ma*Ma/2)*( bar_rho(y)*tilde_upp2vpp__y + tilde_upp2vpp*bar_rho__y(y) )
    // + \Mach^{2} \nabla\cdot\left(
    //       \frac{\overline{\tau{}u''}}{\Reynolds}
    //   \right)
       + (Ma*Ma/Re)*( bar_tauuppy__y(y) )
    // + \frac{1}{\gamma-1} \nabla\cdot\left(
    //     \frac{ \bar{\mu} \widetilde{\nabla{}T} }{\Reynolds\Prandtl}
    //   \right)
       + (
            tilde_nu*bar_rho_grady_T__y(y) + bar_rho_grady_T(y)*tilde_nu__y
         ) / ((gam-1)*Re*Pr)
    // + \frac{1}{\gamma-1} \nabla\cdot\left(
    //     \frac{ \bar{\rho} \widetilde{\nu'' \left(\nabla{}T\right)''} }
    //          { \Reynolds\Prandtl }
    //   \right)
       + (
            bar_rho(y)*tilde_nupp_gradyTpp__y + tilde_nupp_gradyTpp*bar_rho__y(y)
         ) / ((gam-1)*Re*Pr)
    // - \frac{1}{\gamma-1} \nabla\cdot\left(
    //      \bar{\rho} \widetilde{T''u''}
    //   \right)
       - (
            bar_rho(y)*tilde_Tpp_vpp__y + tilde_Tpp_vpp*bar_rho__y(y)
         ) / (gam-1)
    // + \Mach^{2} \bar{f}\cdot\tilde{u}
       + Ma*Ma*(bar_fx(y)*tilde_u + bar_fy(y)*tilde_v + bar_fz(y)*tilde_w)
    // + \Mach^{2} \overline{f\cdot{}u''}
       + Ma*Ma*bar_f_dot_upp
    // + \bar{q}_b
       + bar_qb(y)
    // + \overline{\mathscr{S}_{\rho{}E}}
       + bar_SrhoE(y)
    // + \overline{\mathscr{C}_{\rho{}E}}
       + bar_CrhoE(y)
    );
// }

// Computation of Favre-averaged turbulent kinetic energy residual per writeup
// Residual broken out contribution-by-contribution to aid examining budgets
// {

// - \nabla\cdot\bar{\rho}k\tilde{u}
tke_convection = - bar_rho_v(y)*tilde_k__y - tilde_k*bar_rho_v__y(y);

// - \bar{\rho} \widetilde{u''\otimes{}u''} : \nabla\tilde{u}
tke_production = - bar_rho(y)*(    tilde_upp_vpp*tilde_u__y
                                 + tilde_vpp_vpp*tilde_v__y
                                 + tilde_vpp_wpp*tilde_w__y );

// Guarini et al JFM 2000 defines this sans negative but always negates it
// Here, the sign is folded into the term definition to avoid forgetting it
// - \frac{\bar{\rho} \epsilon}{\Reynolds}
tke_dissipation = - bar_rho(y)*tilde_epsilon / Re;

// - \frac{1}{2}\nabla\cdot\left(
//       \bar{\rho} \widetilde{{u''}^{2}u''}
//   \right)
tke_transport = - bar_rho(y)*tilde_upp2vpp__y/2 - tilde_upp2vpp*bar_rho__y(y)/2;

// + \nabla\cdot\left( \frac{\overline{\tau{}u''}}{\Reynolds} \right)
tke_diffusion = + bar_tauuppy__y(y)/Re;

// Name chosen per discussion on page 216 of Lele 1994 Annual Review
// + \frac{1}{\Mach^2} \left(
//       \bar{p}\nabla\cdot\overline{u''}
//   \right)
tke_pmassflux = (bar_p(y)*bar_vpp__y) / (Ma*Ma);

// + \frac{1}{\Mach^2} \left(
//     + \overline{p' \nabla\cdot{}u''}
//   \right)
tke_pdilatation = bar_pp_div_upp / (Ma*Ma);

// + \frac{1}{\Mach^2} \left(
//     - \frac{1}{\gamma} \nabla\cdot\bar{\rho} \widetilde{T''u''}
//   \right)
tke_pheatflux = ( - bar_rho(y)*tilde_Tpp_vpp__y/gam
                  - tilde_Tpp_vpp*bar_rho__y(y)/gam ) / (Ma*Ma);

// + \overline{f\cdot{}u''}
tke_forcing = bar_f_dot_upp;

// + \overline{\mathscr{S}_{\rho{}u}\cdot{}upp}
tke_slowgrowth = bar_Srhou_dot_upp;

// + \overline{\mathscr{C}_{\rho{}u}\cdot{}upp}
tke_constraint = bar_Crhou_dot_upp;

// Finally, the TKE equation is build from the above tke_* terms
bar_rho_k__t = ( tke_convection
               + tke_production
               + tke_dissipation  // Negative sign already included!
               + tke_transport
               + tke_diffusion
               + tke_pmassflux
               + tke_pdilatation
               + tke_pheatflux
               + tke_forcing
               + tke_slowgrowth
               + tke_constraint);
// }
