/*! \page linkage Linking applications

<h2>Compiling and linking a C/C++ application against underling</h2>

To compile and link a C or C++ application against your underling installation,
the installation's \c include directory and \c lib directory must be added to
your C/C++ compiler's include and library search paths, respectively.  You will
need to supply flags to link against underling and FFTW MPI.  FFTW and
vendor-specific threading flags may also be necessary.  Note that you will
either need to use your MPI implementation's C/C++ compiler wrapper script,
denoted here by <tt>\$(MPICC)/$(MPICXX)</tt>, or you will additionally need to
provide MPI-related flags within the sample commands below.

Assuming you installed pthreads-based threaded FFTW under $FFTWHOME and also
assuming at underling configuration time you specified <tt>--prefix=$HOME</tt>
to install underling under your home directory, compiling and linking an MPI
application consisting of a single source file named <tt>app.c</tt> might look
as follows:

\code > $(MPICC) -I$HOME/include app.c -L$HOME/lib -lesio -L$FFTWHOME -lfftw3_mpi -lfftw3_threads -lfftw3 -lm -pthread \endcode

This is error prone as you must supply the same FFTW installation directories
used at underling configuration time as well as threading details.  Continuing
the example, if you set your <tt>PKG_CONFIG_PATH</tt> environment variable to
contain <tt>$HOME/lib/pkgconfig</tt> you can use <a
href="http://pkg-config.freedesktop.org/wiki/"><tt>pkg-config</tt></a> to
lookup the relevant compilation and linking information automatically:

\code > $(MPICC) `pkg-config --cflags underling-fftw-pthreads` app.c `pkg-config --libs underling-fftw-pthreads` \endcode

Other <tt>pkg-config</tt> identifiers you may use include <tt>underling</tt>,
<tt>underling-fftw</tt>, <tt>underling-fftw-pthreads</tt>, and
<tt>underling-fftw-openmp</tt>.  The first option includes no FFTW
dependencies, the second option defaults to using a default threading if it was
enabled at FFTW build time or no threading if none was enabled.  The third and
fourth options select specific threading implementations.  The third and fourth
options may not be available in FFTW was built without threading.

Using pkg-config will avoid many easy-to-make mistakes.  It is highly
recommended you use pkg-config with underling where possible.

<h2>Compiling and linking a Fortran application against ESIO</h2>

At this time no Fortran interface is provided.  One based upon the
ISO_C_BINDING module is planned.

<h2>Using underling with GNU Autoconf/Automake</h2>

Because an underling installation provides pkg-config information, using
underling with <a href="http://www.gnu.org/software/autoconf/">Autoconf</a> and
<a href="http://www.gnu.org/software/automake/">Automake</a> in a C/C++ project
is straightforward.  The exact details are beyond the scope of this
documentation, but the process consists of the following steps:

<ol>
 <li>Use <a href="http://www.gnu.org/software/autoconf-archive/ax_mpi.html">
     <tt>AX_MPI</tt></a> within your <tt>configure.ac</tt> to determine
     where your system's MPI compiler wrappers are located.</li>
 <li>Ensure that automake is using the MPI compiler wrapper by including
     a statement like <tt>CC=@@MPICC@@</tt> within your Makefile.am.</li>
 <li>Use the PKG_CHECK_MODULES autoconf macro to look for underling's
     <tt>underling-fftw</tt> pkg-config information at configure time.
     Load the information into variables like <tt>UNDERLING_CFLAGS</tt>
     and <tt>UNDERLING_LIBS</tt>.</li>
 <li>Add <tt>UNDERLING_CFLAGS</tt> and <tt>UNDERLING_LIBS</tt> to the
     appropriate targets within your Makefile.am.</li>
</ol>

One very good, but not underling-specific, write up on using GNU Autoconf/Automake
with pkg-config is <a
href="http://www.openismus.com/documents/linux/using_libraries/using_libraries">
Using C/C++ libraries with Automake and Autoconf</a>.

*/
